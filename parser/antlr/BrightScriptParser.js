// Generated from BrightScript.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('antlr4/index');
var BrightScriptListener = require('./BrightScriptListener').BrightScriptListener;
var BrightScriptVisitor = require('./BrightScriptVisitor').BrightScriptVisitor;

var grammarFileName = "BrightScript.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003e\u02a9\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0003\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0003\u0007\u0003g\n\u0003\f\u0003\u000e\u0003",
    "j\u000b\u0003\u0003\u0003\u0007\u0003m\n\u0003\f\u0003\u000e\u0003p",
    "\u000b\u0003\u0003\u0003\u0007\u0003s\n\u0003\f\u0003\u000e\u0003v\u000b",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0006\u0004|",
    "\n\u0004\r\u0004\u000e\u0004}\u0003\u0004\u0003\u0004\u0007\u0004\u0082",
    "\n\u0004\f\u0004\u000e\u0004\u0085\u000b\u0004\u0003\u0004\u0007\u0004",
    "\u0088\n\u0004\f\u0004\u000e\u0004\u008b\u000b\u0004\u0003\u0005\u0003",
    "\u0005\u0005\u0005\u008f\n\u0005\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0007\u0006\u0095\n\u0006\f\u0006\u000e\u0006\u0098\u000b",
    "\u0006\u0003\u0006\u0006\u0006\u009b\n\u0006\r\u0006\u000e\u0006\u009c",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0005\u0007\u00ab\n\u0007\u0003\b\u0003\b\u0007\b\u00af\n\b\f\b\u000e",
    "\b\u00b2\u000b\b\u0003\b\u0003\b\u0003\b\u0005\b\u00b7\n\b\u0003\b\u0003",
    "\b\u0005\b\u00bb\n\b\u0003\b\u0007\b\u00be\n\b\f\b\u000e\b\u00c1\u000b",
    "\b\u0003\b\u0003\b\u0003\b\u0005\b\u00c6\n\b\u0007\b\u00c8\n\b\f\b\u000e",
    "\b\u00cb\u000b\b\u0005\b\u00cd\n\b\u0003\b\u0007\b\u00d0\n\b\f\b\u000e",
    "\b\u00d3\u000b\b\u0003\b\u0003\b\u0003\t\u0003\t\u0007\t\u00d9\n\t\f",
    "\t\u000e\t\u00dc\u000b\t\u0003\t\u0003\t\u0003\t\u0005\t\u00e1\n\t\u0003",
    "\t\u0007\t\u00e4\n\t\f\t\u000e\t\u00e7\u000b\t\u0003\t\u0007\t\u00ea",
    "\n\t\f\t\u000e\t\u00ed\u000b\t\u0005\t\u00ef\n\t\u0003\t\u0007\t\u00f2",
    "\n\t\f\t\u000e\t\u00f5\u000b\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003",
    "\n\u0005\n\u00fc\n\n\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0005\f\u010b\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0005\r\u0115\n\r\u0003\r\u0006\r\u0118\n\r",
    "\r\r\u000e\r\u0119\u0003\r\u0007\r\u011d\n\r\f\r\u000e\r\u0120\u000b",
    "\r\u0003\r\u0005\r\u0123\n\r\u0003\r\u0003\r\u0005\r\u0127\n\r\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0006",
    "\u000e\u012f\n\u000e\r\u000e\u000e\u000e\u0130\u0003\u000e\u0007\u000e",
    "\u0134\n\u000e\f\u000e\u000e\u000e\u0137\u000b\u000e\u0003\u000e\u0005",
    "\u000e\u013a\n\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u013e\n\u000e",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0007\u000f\u0143\n\u000f\f\u000f",
    "\u000e\u000f\u0146\u000b\u000f\u0003\u000f\u0005\u000f\u0149\n\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u014e\n\u000f\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0153\n\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0005\u0010\u0158\n\u0010\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0005\u0011\u015d\n\u0011\u0003\u0011\u0006\u0011",
    "\u0160\n\u0011\r\u0011\u000e\u0011\u0161\u0003\u0011\u0007\u0011\u0165",
    "\n\u0011\f\u0011\u000e\u0011\u0168\u000b\u0011\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0005\u0012\u016e\n\u0012\u0003\u0012\u0006",
    "\u0012\u0171\n\u0012\r\u0012\u000e\u0012\u0172\u0003\u0012\u0007\u0012",
    "\u0176\n\u0012\f\u0012\u000e\u0012\u0179\u000b\u0012\u0003\u0013\u0003",
    "\u0013\u0006\u0013\u017d\n\u0013\r\u0013\u000e\u0013\u017e\u0003\u0013",
    "\u0007\u0013\u0182\n\u0013\f\u0013\u000e\u0013\u0185\u000b\u0013\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0005\u0016\u018f\n\u0016\u0003\u0016\u0007\u0016",
    "\u0192\n\u0016\f\u0016\u000e\u0016\u0195\u000b\u0016\u0003\u0016\u0005",
    "\u0016\u0198\n\u0016\u0005\u0016\u019a\n\u0016\u0003\u0017\u0003\u0017",
    "\u0005\u0017\u019e\n\u0017\u0003\u0018\u0003\u0018\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0006\u0019\u01a5\n\u0019\r\u0019\u000e\u0019\u01a6",
    "\u0003\u0019\u0007\u0019\u01aa\n\u0019\f\u0019\u000e\u0019\u01ad\u000b",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0005",
    "\u001a\u01b4\n\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u01b8\n\u001a",
    "\u0003\u001a\u0006\u001a\u01bb\n\u001a\r\u001a\u000e\u001a\u01bc\u0003",
    "\u001a\u0007\u001a\u01c0\n\u001a\f\u001a\u000e\u001a\u01c3\u000b\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0005\u001b\u01cb\n\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u01cf",
    "\n\u001b\u0003\u001b\u0006\u001b\u01d2\n\u001b\r\u001b\u000e\u001b\u01d3",
    "\u0003\u001b\u0007\u001b\u01d7\n\u001b\f\u001b\u000e\u001b\u01da\u000b",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0005",
    "\u001c\u01e1\n\u001c\u0003\u001c\u0006\u001c\u01e4\n\u001c\r\u001c\u000e",
    "\u001c\u01e5\u0003\u001c\u0007\u001c\u01e9\n\u001c\f\u001c\u000e\u001c",
    "\u01ec\u000b\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0005\u001d\u01f4\n\u001d\u0003\u001d\u0006\u001d",
    "\u01f7\n\u001d\r\u001d\u000e\u001d\u01f8\u0003\u001d\u0007\u001d\u01fc",
    "\n\u001d\f\u001d\u000e\u001d\u01ff\u000b\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0007\u001e",
    "\u0208\n\u001e\f\u001e\u000e\u001e\u020b\u000b\u001e\u0005\u001e\u020d",
    "\n\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0005\u001f",
    "\u0213\n\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0217\n\u001f\u0003",
    "\u001f\u0003\u001f\u0005\u001f\u021b\n\u001f\u0003 \u0003 \u0003!\u0003",
    "!\u0003!\u0005!\u0222\n!\u0003!\u0003!\u0003!\u0003!\u0005!\u0228\n",
    "!\u0007!\u022a\n!\f!\u000e!\u022d\u000b!\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0005$\u023d\n$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0005$\u0252\n$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0005$\u025c\n$\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0007",
    "$\u0264\n$\f$\u000e$\u0267\u000b$\u0003%\u0003%\u0003%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0003%\u0003%\u0003%\u0005%\u0274\n%\u0003&\u0003",
    "&\u0003&\u0003&\u0005&\u027a\n&\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0005\'\u0281\n\'\u0003(\u0003(\u0003)\u0003)\u0003*\u0003*\u0003",
    "+\u0003+\u0003,\u0003,\u0005,\u028d\n,\u0003-\u0003-\u0003.\u0003.\u0003",
    "/\u0003/\u00030\u00030\u00050\u0297\n0\u00030\u00070\u029a\n0\f0\u000e",
    "0\u029d\u000b0\u00031\u00031\u00051\u02a1\n1\u00031\u00071\u02a4\n1",
    "\f1\u000e1\u02a7\u000b1\u00031\u0002\u0003F2\u0002\u0004\u0006\b\n\f",
    "\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.0246",
    "8:<>@BDFHJLNPRTVXZ\\^`\u0002\u000e\u0004\u0002NNee\n\u0002&&*+88::A",
    "AJJTTZZ\u0006\u0002((;=TTVV\u0003\u0002\u000e\u000f\u0004\u0002\u0012",
    "\u0014GG\u0003\u0002\u0015\u0016\u0004\u0002\t\t\u0017\u001b\u0004\u0002",
    "$$LL\u0003\u0002\u0010\u0011\u0004\u0002\t\t\u001c#\u0004\u000277YY",
    "\f\u0002$$\'),79?CDFFHIKSUY[\\\u0002\u02f2\u0002b\u0003\u0002\u0002",
    "\u0002\u0004h\u0003\u0002\u0002\u0002\u0006y\u0003\u0002\u0002\u0002",
    "\b\u008e\u0003\u0002\u0002\u0002\n\u0090\u0003\u0002\u0002\u0002\f\u00aa",
    "\u0003\u0002\u0002\u0002\u000e\u00ac\u0003\u0002\u0002\u0002\u0010\u00d6",
    "\u0003\u0002\u0002\u0002\u0012\u00fb\u0003\u0002\u0002\u0002\u0014\u0100",
    "\u0003\u0002\u0002\u0002\u0016\u010a\u0003\u0002\u0002\u0002\u0018\u010c",
    "\u0003\u0002\u0002\u0002\u001a\u0128\u0003\u0002\u0002\u0002\u001c\u014d",
    "\u0003\u0002\u0002\u0002\u001e\u014f\u0003\u0002\u0002\u0002 \u0159",
    "\u0003\u0002\u0002\u0002\"\u0169\u0003\u0002\u0002\u0002$\u017a\u0003",
    "\u0002\u0002\u0002&\u0186\u0003\u0002\u0002\u0002(\u0189\u0003\u0002",
    "\u0002\u0002*\u018b\u0003\u0002\u0002\u0002,\u019b\u0003\u0002\u0002",
    "\u0002.\u019f\u0003\u0002\u0002\u00020\u01a1\u0003\u0002\u0002\u0002",
    "2\u01b1\u0003\u0002\u0002\u00024\u01c7\u0003\u0002\u0002\u00026\u01de",
    "\u0003\u0002\u0002\u00028\u01f0\u0003\u0002\u0002\u0002:\u0203\u0003",
    "\u0002\u0002\u0002<\u0212\u0003\u0002\u0002\u0002>\u021c\u0003\u0002",
    "\u0002\u0002@\u0221\u0003\u0002\u0002\u0002B\u022e\u0003\u0002\u0002",
    "\u0002D\u0233\u0003\u0002\u0002\u0002F\u023c\u0003\u0002\u0002\u0002",
    "H\u0273\u0003\u0002\u0002\u0002J\u0279\u0003\u0002\u0002\u0002L\u0280",
    "\u0003\u0002\u0002\u0002N\u0282\u0003\u0002\u0002\u0002P\u0284\u0003",
    "\u0002\u0002\u0002R\u0286\u0003\u0002\u0002\u0002T\u0288\u0003\u0002",
    "\u0002\u0002V\u028a\u0003\u0002\u0002\u0002X\u028e\u0003\u0002\u0002",
    "\u0002Z\u0290\u0003\u0002\u0002\u0002\\\u0292\u0003\u0002\u0002\u0002",
    "^\u0296\u0003\u0002\u0002\u0002`\u02a0\u0003\u0002\u0002\u0002bc\u0005",
    "\u0004\u0003\u0002cd\u0007\u0002\u0002\u0003d\u0003\u0003\u0002\u0002",
    "\u0002eg\u0005^0\u0002fe\u0003\u0002\u0002\u0002gj\u0003\u0002\u0002",
    "\u0002hf\u0003\u0002\u0002\u0002hi\u0003\u0002\u0002\u0002in\u0003\u0002",
    "\u0002\u0002jh\u0003\u0002\u0002\u0002km\u0005&\u0014\u0002lk\u0003",
    "\u0002\u0002\u0002mp\u0003\u0002\u0002\u0002nl\u0003\u0002\u0002\u0002",
    "no\u0003\u0002\u0002\u0002ot\u0003\u0002\u0002\u0002pn\u0003\u0002\u0002",
    "\u0002qs\u0005^0\u0002rq\u0003\u0002\u0002\u0002sv\u0003\u0002\u0002",
    "\u0002tr\u0003\u0002\u0002\u0002tu\u0003\u0002\u0002\u0002uw\u0003\u0002",
    "\u0002\u0002vt\u0003\u0002\u0002\u0002wx\u0005\u0006\u0004\u0002x\u0005",
    "\u0003\u0002\u0002\u0002y\u0083\u0005\b\u0005\u0002z|\u0005^0\u0002",
    "{z\u0003\u0002\u0002\u0002|}\u0003\u0002\u0002\u0002}{\u0003\u0002\u0002",
    "\u0002}~\u0003\u0002\u0002\u0002~\u007f\u0003\u0002\u0002\u0002\u007f",
    "\u0080\u0005\b\u0005\u0002\u0080\u0082\u0003\u0002\u0002\u0002\u0081",
    "{\u0003\u0002\u0002\u0002\u0082\u0085\u0003\u0002\u0002\u0002\u0083",
    "\u0081\u0003\u0002\u0002\u0002\u0083\u0084\u0003\u0002\u0002\u0002\u0084",
    "\u0089\u0003\u0002\u0002\u0002\u0085\u0083\u0003\u0002\u0002\u0002\u0086",
    "\u0088\u0005^0\u0002\u0087\u0086\u0003\u0002\u0002\u0002\u0088\u008b",
    "\u0003\u0002\u0002\u0002\u0089\u0087\u0003\u0002\u0002\u0002\u0089\u008a",
    "\u0003\u0002\u0002\u0002\u008a\u0007\u0003\u0002\u0002\u0002\u008b\u0089",
    "\u0003\u0002\u0002\u0002\u008c\u008f\u00054\u001b\u0002\u008d\u008f",
    "\u00058\u001d\u0002\u008e\u008c\u0003\u0002\u0002\u0002\u008e\u008d",
    "\u0003\u0002\u0002\u0002\u008f\t\u0003\u0002\u0002\u0002\u0090\u0096",
    "\u0005\f\u0007\u0002\u0091\u0092\u0005`1\u0002\u0092\u0093\u0005\f\u0007",
    "\u0002\u0093\u0095\u0003\u0002\u0002\u0002\u0094\u0091\u0003\u0002\u0002",
    "\u0002\u0095\u0098\u0003\u0002\u0002\u0002\u0096\u0094\u0003\u0002\u0002",
    "\u0002\u0096\u0097\u0003\u0002\u0002\u0002\u0097\u009a\u0003\u0002\u0002",
    "\u0002\u0098\u0096\u0003\u0002\u0002\u0002\u0099\u009b\u0005`1\u0002",
    "\u009a\u0099\u0003\u0002\u0002\u0002\u009b\u009c\u0003\u0002\u0002\u0002",
    "\u009c\u009a\u0003\u0002\u0002\u0002\u009c\u009d\u0003\u0002\u0002\u0002",
    "\u009d\u000b\u0003\u0002\u0002\u0002\u009e\u00ab\u0005\\/\u0002\u009f",
    "\u00ab\u0005\u0014\u000b\u0002\u00a0\u00ab\u0005\u0016\f\u0002\u00a1",
    "\u00ab\u0005\u0018\r\u0002\u00a2\u00ab\u0005\u001a\u000e\u0002\u00a3",
    "\u00ab\u0005\u001c\u000f\u0002\u00a4\u00ab\u0005(\u0015\u0002\u00a5",
    "\u00ab\u0005*\u0016\u0002\u00a6\u00ab\u0005,\u0017\u0002\u00a7\u00ab",
    "\u0005.\u0018\u0002\u00a8\u00ab\u00050\u0019\u0002\u00a9\u00ab\u0005",
    "F$\u0002\u00aa\u009e\u0003\u0002\u0002\u0002\u00aa\u009f\u0003\u0002",
    "\u0002\u0002\u00aa\u00a0\u0003\u0002\u0002\u0002\u00aa\u00a1\u0003\u0002",
    "\u0002\u0002\u00aa\u00a2\u0003\u0002\u0002\u0002\u00aa\u00a3\u0003\u0002",
    "\u0002\u0002\u00aa\u00a4\u0003\u0002\u0002\u0002\u00aa\u00a5\u0003\u0002",
    "\u0002\u0002\u00aa\u00a6\u0003\u0002\u0002\u0002\u00aa\u00a7\u0003\u0002",
    "\u0002\u0002\u00aa\u00a8\u0003\u0002\u0002\u0002\u00aa\u00a9\u0003\u0002",
    "\u0002\u0002\u00ab\r\u0003\u0002\u0002\u0002\u00ac\u00b0\u0007\u0003",
    "\u0002\u0002\u00ad\u00af\u0007b\u0002\u0002\u00ae\u00ad\u0003\u0002",
    "\u0002\u0002\u00af\u00b2\u0003\u0002\u0002\u0002\u00b0\u00ae\u0003\u0002",
    "\u0002\u0002\u00b0\u00b1\u0003\u0002\u0002\u0002\u00b1\u00cc\u0003\u0002",
    "\u0002\u0002\u00b2\u00b0\u0003\u0002\u0002\u0002\u00b3\u00b7\u0005F",
    "$\u0002\u00b4\u00b7\u0005\u000e\b\u0002\u00b5\u00b7\u0005\u0010\t\u0002",
    "\u00b6\u00b3\u0003\u0002\u0002\u0002\u00b6\u00b4\u0003\u0002\u0002\u0002",
    "\u00b6\u00b5\u0003\u0002\u0002\u0002\u00b7\u00c9\u0003\u0002\u0002\u0002",
    "\u00b8\u00bb\u0007\u0004\u0002\u0002\u00b9\u00bb\u0005^0\u0002\u00ba",
    "\u00b8\u0003\u0002\u0002\u0002\u00ba\u00b9\u0003\u0002\u0002\u0002\u00bb",
    "\u00bf\u0003\u0002\u0002\u0002\u00bc\u00be\u0007b\u0002\u0002\u00bd",
    "\u00bc\u0003\u0002\u0002\u0002\u00be\u00c1\u0003\u0002\u0002\u0002\u00bf",
    "\u00bd\u0003\u0002\u0002\u0002\u00bf\u00c0\u0003\u0002\u0002\u0002\u00c0",
    "\u00c5\u0003\u0002\u0002\u0002\u00c1\u00bf\u0003\u0002\u0002\u0002\u00c2",
    "\u00c6\u0005F$\u0002\u00c3\u00c6\u0005\u000e\b\u0002\u00c4\u00c6\u0005",
    "\u0010\t\u0002\u00c5\u00c2\u0003\u0002\u0002\u0002\u00c5\u00c3\u0003",
    "\u0002\u0002\u0002\u00c5\u00c4\u0003\u0002\u0002\u0002\u00c6\u00c8\u0003",
    "\u0002\u0002\u0002\u00c7\u00ba\u0003\u0002\u0002\u0002\u00c8\u00cb\u0003",
    "\u0002\u0002\u0002\u00c9\u00c7\u0003\u0002\u0002\u0002\u00c9\u00ca\u0003",
    "\u0002\u0002\u0002\u00ca\u00cd\u0003\u0002\u0002\u0002\u00cb\u00c9\u0003",
    "\u0002\u0002\u0002\u00cc\u00b6\u0003\u0002\u0002\u0002\u00cc\u00cd\u0003",
    "\u0002\u0002\u0002\u00cd\u00d1\u0003\u0002\u0002\u0002\u00ce\u00d0\u0007",
    "b\u0002\u0002\u00cf\u00ce\u0003\u0002\u0002\u0002\u00d0\u00d3\u0003",
    "\u0002\u0002\u0002\u00d1\u00cf\u0003\u0002\u0002\u0002\u00d1\u00d2\u0003",
    "\u0002\u0002\u0002\u00d2\u00d4\u0003\u0002\u0002\u0002\u00d3\u00d1\u0003",
    "\u0002\u0002\u0002\u00d4\u00d5\u0007\u0005\u0002\u0002\u00d5\u000f\u0003",
    "\u0002\u0002\u0002\u00d6\u00da\u0007\u0006\u0002\u0002\u00d7\u00d9\u0007",
    "b\u0002\u0002\u00d8\u00d7\u0003\u0002\u0002\u0002\u00d9\u00dc\u0003",
    "\u0002\u0002\u0002\u00da\u00d8\u0003\u0002\u0002\u0002\u00da\u00db\u0003",
    "\u0002\u0002\u0002\u00db\u00ee\u0003\u0002\u0002\u0002\u00dc\u00da\u0003",
    "\u0002\u0002\u0002\u00dd\u00eb\u0005\u0012\n\u0002\u00de\u00e1\u0007",
    "\u0004\u0002\u0002\u00df\u00e1\u0005^0\u0002\u00e0\u00de\u0003\u0002",
    "\u0002\u0002\u00e0\u00df\u0003\u0002\u0002\u0002\u00e1\u00e5\u0003\u0002",
    "\u0002\u0002\u00e2\u00e4\u0007b\u0002\u0002\u00e3\u00e2\u0003\u0002",
    "\u0002\u0002\u00e4\u00e7\u0003\u0002\u0002\u0002\u00e5\u00e3\u0003\u0002",
    "\u0002\u0002\u00e5\u00e6\u0003\u0002\u0002\u0002\u00e6\u00e8\u0003\u0002",
    "\u0002\u0002\u00e7\u00e5\u0003\u0002\u0002\u0002\u00e8\u00ea\u0005\u0012",
    "\n\u0002\u00e9\u00e0\u0003\u0002\u0002\u0002\u00ea\u00ed\u0003\u0002",
    "\u0002\u0002\u00eb\u00e9\u0003\u0002\u0002\u0002\u00eb\u00ec\u0003\u0002",
    "\u0002\u0002\u00ec\u00ef\u0003\u0002\u0002\u0002\u00ed\u00eb\u0003\u0002",
    "\u0002\u0002\u00ee\u00dd\u0003\u0002\u0002\u0002\u00ee\u00ef\u0003\u0002",
    "\u0002\u0002\u00ef\u00f3\u0003\u0002\u0002\u0002\u00f0\u00f2\u0007b",
    "\u0002\u0002\u00f1\u00f0\u0003\u0002\u0002\u0002\u00f2\u00f5\u0003\u0002",
    "\u0002\u0002\u00f3\u00f1\u0003\u0002\u0002\u0002\u00f3\u00f4\u0003\u0002",
    "\u0002\u0002\u00f4\u00f6\u0003\u0002\u0002\u0002\u00f5\u00f3\u0003\u0002",
    "\u0002\u0002\u00f6\u00f7\u0007\u0007\u0002\u0002\u00f7\u0011\u0003\u0002",
    "\u0002\u0002\u00f8\u00fc\u0005V,\u0002\u00f9\u00fc\u0005Z.\u0002\u00fa",
    "\u00fc\u0005P)\u0002\u00fb\u00f8\u0003\u0002\u0002\u0002\u00fb\u00f9",
    "\u0003\u0002\u0002\u0002\u00fb\u00fa\u0003\u0002\u0002\u0002\u00fc\u00fd",
    "\u0003\u0002\u0002\u0002\u00fd\u00fe\u0007\b\u0002\u0002\u00fe\u00ff",
    "\u0005L\'\u0002\u00ff\u0013\u0003\u0002\u0002\u0002\u0100\u0101\u0007",
    ")\u0002\u0002\u0101\u0102\u0005V,\u0002\u0102\u0103\u0007\u0003\u0002",
    "\u0002\u0103\u0104\u0005:\u001e\u0002\u0104\u0105\u0007\u0005\u0002",
    "\u0002\u0105\u0015\u0003\u0002\u0002\u0002\u0106\u0107\u00074\u0002",
    "\u0002\u0107\u010b\u0007\\\u0002\u0002\u0108\u0109\u00074\u0002\u0002",
    "\u0109\u010b\u00079\u0002\u0002\u010a\u0106\u0003\u0002\u0002\u0002",
    "\u010a\u0108\u0003\u0002\u0002\u0002\u010b\u0017\u0003\u0002\u0002\u0002",
    "\u010c\u010d\u00079\u0002\u0002\u010d\u010e\u0005V,\u0002\u010e\u010f",
    "\u0007\t\u0002\u0002\u010f\u0110\u0005F$\u0002\u0110\u0111\u0007X\u0002",
    "\u0002\u0111\u0114\u0005F$\u0002\u0112\u0113\u0007R\u0002\u0002\u0113",
    "\u0115\u0005F$\u0002\u0114\u0112\u0003\u0002\u0002\u0002\u0114\u0115",
    "\u0003\u0002\u0002\u0002\u0115\u0117\u0003\u0002\u0002\u0002\u0116\u0118",
    "\u0005^0\u0002\u0117\u0116\u0003\u0002\u0002\u0002\u0118\u0119\u0003",
    "\u0002\u0002\u0002\u0119\u0117\u0003\u0002\u0002\u0002\u0119\u011a\u0003",
    "\u0002\u0002\u0002\u011a\u011e\u0003\u0002\u0002\u0002\u011b\u011d\u0005",
    "\n\u0006\u0002\u011c\u011b\u0003\u0002\u0002\u0002\u011d\u0120\u0003",
    "\u0002\u0002\u0002\u011e\u011c\u0003\u0002\u0002\u0002\u011e\u011f\u0003",
    "\u0002\u0002\u0002\u011f\u0122\u0003\u0002\u0002\u0002\u0120\u011e\u0003",
    "\u0002\u0002\u0002\u0121\u0123\u0005(\u0015\u0002\u0122\u0121\u0003",
    "\u0002\u0002\u0002\u0122\u0123\u0003\u0002\u0002\u0002\u0123\u0126\u0003",
    "\u0002\u0002\u0002\u0124\u0125\u0007/\u0002\u0002\u0125\u0127\u0007",
    "9\u0002\u0002\u0126\u0124\u0003\u0002\u0002\u0002\u0126\u0127\u0003",
    "\u0002\u0002\u0002\u0127\u0019\u0003\u0002\u0002\u0002\u0128\u0129\u0007",
    "9\u0002\u0002\u0129\u012a\u0007,\u0002\u0002\u012a\u012b\u0005V,\u0002",
    "\u012b\u012c\u0007@\u0002\u0002\u012c\u012e\u0005F$\u0002\u012d\u012f",
    "\u0005^0\u0002\u012e\u012d\u0003\u0002\u0002\u0002\u012f\u0130\u0003",
    "\u0002\u0002\u0002\u0130\u012e\u0003\u0002\u0002\u0002\u0130\u0131\u0003",
    "\u0002\u0002\u0002\u0131\u0135\u0003\u0002\u0002\u0002\u0132\u0134\u0005",
    "\n\u0006\u0002\u0133\u0132\u0003\u0002\u0002\u0002\u0134\u0137\u0003",
    "\u0002\u0002\u0002\u0135\u0133\u0003\u0002\u0002\u0002\u0135\u0136\u0003",
    "\u0002\u0002\u0002\u0136\u0139\u0003\u0002\u0002\u0002\u0137\u0135\u0003",
    "\u0002\u0002\u0002\u0138\u013a\u0005(\u0015\u0002\u0139\u0138\u0003",
    "\u0002\u0002\u0002\u0139\u013a\u0003\u0002\u0002\u0002\u013a\u013d\u0003",
    "\u0002\u0002\u0002\u013b\u013c\u0007/\u0002\u0002\u013c\u013e\u0007",
    "9\u0002\u0002\u013d\u013b\u0003\u0002\u0002\u0002\u013d\u013e\u0003",
    "\u0002\u0002\u0002\u013e\u001b\u0003\u0002\u0002\u0002\u013f\u014e\u0005",
    "\u001e\u0010\u0002\u0140\u0144\u0005 \u0011\u0002\u0141\u0143\u0005",
    "\"\u0012\u0002\u0142\u0141\u0003\u0002\u0002\u0002\u0143\u0146\u0003",
    "\u0002\u0002\u0002\u0144\u0142\u0003\u0002\u0002\u0002\u0144\u0145\u0003",
    "\u0002\u0002\u0002\u0145\u0148\u0003\u0002\u0002\u0002\u0146\u0144\u0003",
    "\u0002\u0002\u0002\u0147\u0149\u0005$\u0013\u0002\u0148\u0147\u0003",
    "\u0002\u0002\u0002\u0148\u0149\u0003\u0002\u0002\u0002\u0149\u014a\u0003",
    "\u0002\u0002\u0002\u014a\u014b\u0007/\u0002\u0002\u014b\u014c\u0007",
    "?\u0002\u0002\u014c\u014e\u0003\u0002\u0002\u0002\u014d\u013f\u0003",
    "\u0002\u0002\u0002\u014d\u0140\u0003\u0002\u0002\u0002\u014e\u001d\u0003",
    "\u0002\u0002\u0002\u014f\u0150\u0007?\u0002\u0002\u0150\u0152\u0005",
    "F$\u0002\u0151\u0153\u0007W\u0002\u0002\u0152\u0151\u0003\u0002\u0002",
    "\u0002\u0152\u0153\u0003\u0002\u0002\u0002\u0153\u0154\u0003\u0002\u0002",
    "\u0002\u0154\u0157\u0005\f\u0007\u0002\u0155\u0156\u0007-\u0002\u0002",
    "\u0156\u0158\u0005\f\u0007\u0002\u0157\u0155\u0003\u0002\u0002\u0002",
    "\u0157\u0158\u0003\u0002\u0002\u0002\u0158\u001f\u0003\u0002\u0002\u0002",
    "\u0159\u015a\u0007?\u0002\u0002\u015a\u015c\u0005F$\u0002\u015b\u015d",
    "\u0007W\u0002\u0002\u015c\u015b\u0003\u0002\u0002\u0002\u015c\u015d",
    "\u0003\u0002\u0002\u0002\u015d\u015f\u0003\u0002\u0002\u0002\u015e\u0160",
    "\u0005^0\u0002\u015f\u015e\u0003\u0002\u0002\u0002\u0160\u0161\u0003",
    "\u0002\u0002\u0002\u0161\u015f\u0003\u0002\u0002\u0002\u0161\u0162\u0003",
    "\u0002\u0002\u0002\u0162\u0166\u0003\u0002\u0002\u0002\u0163\u0165\u0005",
    "\n\u0006\u0002\u0164\u0163\u0003\u0002\u0002\u0002\u0165\u0168\u0003",
    "\u0002\u0002\u0002\u0166\u0164\u0003\u0002\u0002\u0002\u0166\u0167\u0003",
    "\u0002\u0002\u0002\u0167!\u0003\u0002\u0002\u0002\u0168\u0166\u0003",
    "\u0002\u0002\u0002\u0169\u016a\u0007-\u0002\u0002\u016a\u016b\u0007",
    "?\u0002\u0002\u016b\u016d\u0005F$\u0002\u016c\u016e\u0007W\u0002\u0002",
    "\u016d\u016c\u0003\u0002\u0002\u0002\u016d\u016e\u0003\u0002\u0002\u0002",
    "\u016e\u0170\u0003\u0002\u0002\u0002\u016f\u0171\u0005^0\u0002\u0170",
    "\u016f\u0003\u0002\u0002\u0002\u0171\u0172\u0003\u0002\u0002\u0002\u0172",
    "\u0170\u0003\u0002\u0002\u0002\u0172\u0173\u0003\u0002\u0002\u0002\u0173",
    "\u0177\u0003\u0002\u0002\u0002\u0174\u0176\u0005\n\u0006\u0002\u0175",
    "\u0174\u0003\u0002\u0002\u0002\u0176\u0179\u0003\u0002\u0002\u0002\u0177",
    "\u0175\u0003\u0002\u0002\u0002\u0177\u0178\u0003\u0002\u0002\u0002\u0178",
    "#\u0003\u0002\u0002\u0002\u0179\u0177\u0003\u0002\u0002\u0002\u017a",
    "\u017c\u0007-\u0002\u0002\u017b\u017d\u0005^0\u0002\u017c\u017b\u0003",
    "\u0002\u0002\u0002\u017d\u017e\u0003\u0002\u0002\u0002\u017e\u017c\u0003",
    "\u0002\u0002\u0002\u017e\u017f\u0003\u0002\u0002\u0002\u017f\u0183\u0003",
    "\u0002\u0002\u0002\u0180\u0182\u0005\n\u0006\u0002\u0181\u0180\u0003",
    "\u0002\u0002\u0002\u0182\u0185\u0003\u0002\u0002\u0002\u0183\u0181\u0003",
    "\u0002\u0002\u0002\u0183\u0184\u0003\u0002\u0002\u0002\u0184%\u0003",
    "\u0002\u0002\u0002\u0185\u0183\u0003\u0002\u0002\u0002\u0186\u0187\u0007",
    "E\u0002\u0002\u0187\u0188\u0007]\u0002\u0002\u0188\'\u0003\u0002\u0002",
    "\u0002\u0189\u018a\u0007H\u0002\u0002\u018a)\u0003\u0002\u0002\u0002",
    "\u018b\u0199\t\u0002\u0002\u0002\u018c\u0193\u0005F$\u0002\u018d\u018f",
    "\u0007\n\u0002\u0002\u018e\u018d\u0003\u0002\u0002\u0002\u018e\u018f",
    "\u0003\u0002\u0002\u0002\u018f\u0190\u0003\u0002\u0002\u0002\u0190\u0192",
    "\u0005F$\u0002\u0191\u018e\u0003\u0002\u0002\u0002\u0192\u0195\u0003",
    "\u0002\u0002\u0002\u0193\u0191\u0003\u0002\u0002\u0002\u0193\u0194\u0003",
    "\u0002\u0002\u0002\u0194\u0197\u0003\u0002\u0002\u0002\u0195\u0193\u0003",
    "\u0002\u0002\u0002\u0196\u0198\u0007\n\u0002\u0002\u0197\u0196\u0003",
    "\u0002\u0002\u0002\u0197\u0198\u0003\u0002\u0002\u0002\u0198\u019a\u0003",
    "\u0002\u0002\u0002\u0199\u018c\u0003\u0002\u0002\u0002\u0199\u019a\u0003",
    "\u0002\u0002\u0002\u019a+\u0003\u0002\u0002\u0002\u019b\u019d\u0007",
    "P\u0002\u0002\u019c\u019e\u0005L\'\u0002\u019d\u019c\u0003\u0002\u0002",
    "\u0002\u019d\u019e\u0003\u0002\u0002\u0002\u019e-\u0003\u0002\u0002",
    "\u0002\u019f\u01a0\u0007S\u0002\u0002\u01a0/\u0003\u0002\u0002\u0002",
    "\u01a1\u01a2\u0007\\\u0002\u0002\u01a2\u01a4\u0005F$\u0002\u01a3\u01a5",
    "\u0005^0\u0002\u01a4\u01a3\u0003\u0002\u0002\u0002\u01a5\u01a6\u0003",
    "\u0002\u0002\u0002\u01a6\u01a4\u0003\u0002\u0002\u0002\u01a6\u01a7\u0003",
    "\u0002\u0002\u0002\u01a7\u01ab\u0003\u0002\u0002\u0002\u01a8\u01aa\u0005",
    "\n\u0006\u0002\u01a9\u01a8\u0003\u0002\u0002\u0002\u01aa\u01ad\u0003",
    "\u0002\u0002\u0002\u01ab\u01a9\u0003\u0002\u0002\u0002\u01ab\u01ac\u0003",
    "\u0002\u0002\u0002\u01ac\u01ae\u0003\u0002\u0002\u0002\u01ad\u01ab\u0003",
    "\u0002\u0002\u0002\u01ae\u01af\u0007/\u0002\u0002\u01af\u01b0\u0007",
    "\\\u0002\u0002\u01b01\u0003\u0002\u0002\u0002\u01b1\u01b3\u0007:\u0002",
    "\u0002\u01b2\u01b4\u0005:\u001e\u0002\u01b3\u01b2\u0003\u0002\u0002",
    "\u0002\u01b3\u01b4\u0003\u0002\u0002\u0002\u01b4\u01b7\u0003\u0002\u0002",
    "\u0002\u01b5\u01b6\u0007%\u0002\u0002\u01b6\u01b8\u0005> \u0002\u01b7",
    "\u01b5\u0003\u0002\u0002\u0002\u01b7\u01b8\u0003\u0002\u0002\u0002\u01b8",
    "\u01ba\u0003\u0002\u0002\u0002\u01b9\u01bb\u0005^0\u0002\u01ba\u01b9",
    "\u0003\u0002\u0002\u0002\u01bb\u01bc\u0003\u0002\u0002\u0002\u01bc\u01ba",
    "\u0003\u0002\u0002\u0002\u01bc\u01bd\u0003\u0002\u0002\u0002\u01bd\u01c1",
    "\u0003\u0002\u0002\u0002\u01be\u01c0\u0005\n\u0006\u0002\u01bf\u01be",
    "\u0003\u0002\u0002\u0002\u01c0\u01c3\u0003\u0002\u0002\u0002\u01c1\u01bf",
    "\u0003\u0002\u0002\u0002\u01c1\u01c2\u0003\u0002\u0002\u0002\u01c2\u01c4",
    "\u0003\u0002\u0002\u0002\u01c3\u01c1\u0003\u0002\u0002\u0002\u01c4\u01c5",
    "\u0007/\u0002\u0002\u01c5\u01c6\u0007:\u0002\u0002\u01c63\u0003\u0002",
    "\u0002\u0002\u01c7\u01c8\u0007:\u0002\u0002\u01c8\u01ca\u0005X-\u0002",
    "\u01c9\u01cb\u0005:\u001e\u0002\u01ca\u01c9\u0003\u0002\u0002\u0002",
    "\u01ca\u01cb\u0003\u0002\u0002\u0002\u01cb\u01ce\u0003\u0002\u0002\u0002",
    "\u01cc\u01cd\u0007%\u0002\u0002\u01cd\u01cf\u0005> \u0002\u01ce\u01cc",
    "\u0003\u0002\u0002\u0002\u01ce\u01cf\u0003\u0002\u0002\u0002\u01cf\u01d1",
    "\u0003\u0002\u0002\u0002\u01d0\u01d2\u0005^0\u0002\u01d1\u01d0\u0003",
    "\u0002\u0002\u0002\u01d2\u01d3\u0003\u0002\u0002\u0002\u01d3\u01d1\u0003",
    "\u0002\u0002\u0002\u01d3\u01d4\u0003\u0002\u0002\u0002\u01d4\u01d8\u0003",
    "\u0002\u0002\u0002\u01d5\u01d7\u0005\n\u0006\u0002\u01d6\u01d5\u0003",
    "\u0002\u0002\u0002\u01d7\u01da\u0003\u0002\u0002\u0002\u01d8\u01d6\u0003",
    "\u0002\u0002\u0002\u01d8\u01d9\u0003\u0002\u0002\u0002\u01d9\u01db\u0003",
    "\u0002\u0002\u0002\u01da\u01d8\u0003\u0002\u0002\u0002\u01db\u01dc\u0007",
    "/\u0002\u0002\u01dc\u01dd\u0007:\u0002\u0002\u01dd5\u0003\u0002\u0002",
    "\u0002\u01de\u01e0\u0007U\u0002\u0002\u01df\u01e1\u0005:\u001e\u0002",
    "\u01e0\u01df\u0003\u0002\u0002\u0002\u01e0\u01e1\u0003\u0002\u0002\u0002",
    "\u01e1\u01e3\u0003\u0002\u0002\u0002\u01e2\u01e4\u0005^0\u0002\u01e3",
    "\u01e2\u0003\u0002\u0002\u0002\u01e4\u01e5\u0003\u0002\u0002\u0002\u01e5",
    "\u01e3\u0003\u0002\u0002\u0002\u01e5\u01e6\u0003\u0002\u0002\u0002\u01e6",
    "\u01ea\u0003\u0002\u0002\u0002\u01e7\u01e9\u0005\n\u0006\u0002\u01e8",
    "\u01e7\u0003\u0002\u0002\u0002\u01e9\u01ec\u0003\u0002\u0002\u0002\u01ea",
    "\u01e8\u0003\u0002\u0002\u0002\u01ea\u01eb\u0003\u0002\u0002\u0002\u01eb",
    "\u01ed\u0003\u0002\u0002\u0002\u01ec\u01ea\u0003\u0002\u0002\u0002\u01ed",
    "\u01ee\u0007/\u0002\u0002\u01ee\u01ef\u0007U\u0002\u0002\u01ef7\u0003",
    "\u0002\u0002\u0002\u01f0\u01f1\u0007U\u0002\u0002\u01f1\u01f3\u0005",
    "X-\u0002\u01f2\u01f4\u0005:\u001e\u0002\u01f3\u01f2\u0003\u0002\u0002",
    "\u0002\u01f3\u01f4\u0003\u0002\u0002\u0002\u01f4\u01f6\u0003\u0002\u0002",
    "\u0002\u01f5\u01f7\u0005^0\u0002\u01f6\u01f5\u0003\u0002\u0002\u0002",
    "\u01f7\u01f8\u0003\u0002\u0002\u0002\u01f8\u01f6\u0003\u0002\u0002\u0002",
    "\u01f8\u01f9\u0003\u0002\u0002\u0002\u01f9\u01fd\u0003\u0002\u0002\u0002",
    "\u01fa\u01fc\u0005\n\u0006\u0002\u01fb\u01fa\u0003\u0002\u0002\u0002",
    "\u01fc\u01ff\u0003\u0002\u0002\u0002\u01fd\u01fb\u0003\u0002\u0002\u0002",
    "\u01fd\u01fe\u0003\u0002\u0002\u0002\u01fe\u0200\u0003\u0002\u0002\u0002",
    "\u01ff\u01fd\u0003\u0002\u0002\u0002\u0200\u0201\u0007/\u0002\u0002",
    "\u0201\u0202\u0007U\u0002\u0002\u02029\u0003\u0002\u0002\u0002\u0203",
    "\u020c\u0007\u000b\u0002\u0002\u0204\u0209\u0005<\u001f\u0002\u0205",
    "\u0206\u0007\u0004\u0002\u0002\u0206\u0208\u0005<\u001f\u0002\u0207",
    "\u0205\u0003\u0002\u0002\u0002\u0208\u020b\u0003\u0002\u0002\u0002\u0209",
    "\u0207\u0003\u0002\u0002\u0002\u0209\u020a\u0003\u0002\u0002\u0002\u020a",
    "\u020d\u0003\u0002\u0002\u0002\u020b\u0209\u0003\u0002\u0002\u0002\u020c",
    "\u0204\u0003\u0002\u0002\u0002\u020c\u020d\u0003\u0002\u0002\u0002\u020d",
    "\u020e\u0003\u0002\u0002\u0002\u020e\u020f\u0007\f\u0002\u0002\u020f",
    ";\u0003\u0002\u0002\u0002\u0210\u0213\u0005J&\u0002\u0211\u0213\u0005",
    "V,\u0002\u0212\u0210\u0003\u0002\u0002\u0002\u0212\u0211\u0003\u0002",
    "\u0002\u0002\u0213\u0216\u0003\u0002\u0002\u0002\u0214\u0215\u0007\t",
    "\u0002\u0002\u0215\u0217\u0005L\'\u0002\u0216\u0214\u0003\u0002\u0002",
    "\u0002\u0216\u0217\u0003\u0002\u0002\u0002\u0217\u021a\u0003\u0002\u0002",
    "\u0002\u0218\u0219\u0007%\u0002\u0002\u0219\u021b\u0005> \u0002\u021a",
    "\u0218\u0003\u0002\u0002\u0002\u021a\u021b\u0003\u0002\u0002\u0002\u021b",
    "=\u0003\u0002\u0002\u0002\u021c\u021d\t\u0003\u0002\u0002\u021d?\u0003",
    "\u0002\u0002\u0002\u021e\u0222\u0005F$\u0002\u021f\u0222\u0005\u0010",
    "\t\u0002\u0220\u0222\u0005\u000e\b\u0002\u0221\u021e\u0003\u0002\u0002",
    "\u0002\u0221\u021f\u0003\u0002\u0002\u0002\u0221\u0220\u0003\u0002\u0002",
    "\u0002\u0222\u022b\u0003\u0002\u0002\u0002\u0223\u0227\u0007\u0004\u0002",
    "\u0002\u0224\u0228\u0005F$\u0002\u0225\u0228\u0005\u0010\t\u0002\u0226",
    "\u0228\u0005\u000e\b\u0002\u0227\u0224\u0003\u0002\u0002\u0002\u0227",
    "\u0225\u0003\u0002\u0002\u0002\u0227\u0226\u0003\u0002\u0002\u0002\u0228",
    "\u022a\u0003\u0002\u0002\u0002\u0229\u0223\u0003\u0002\u0002\u0002\u022a",
    "\u022d\u0003\u0002\u0002\u0002\u022b\u0229\u0003\u0002\u0002\u0002\u022b",
    "\u022c\u0003\u0002\u0002\u0002\u022cA\u0003\u0002\u0002\u0002\u022d",
    "\u022b\u0003\u0002\u0002\u0002\u022e\u022f\u0005D#\u0002\u022f\u0230",
    "\u0007\u000b\u0002\u0002\u0230\u0231\u0005@!\u0002\u0231\u0232\u0007",
    "\f\u0002\u0002\u0232C\u0003\u0002\u0002\u0002\u0233\u0234\t\u0004\u0002",
    "\u0002\u0234E\u0003\u0002\u0002\u0002\u0235\u0236\b$\u0001\u0002\u0236",
    "\u023d\u0005H%\u0002\u0237\u023d\u0005B\"\u0002\u0238\u0239\t\u0005",
    "\u0002\u0002\u0239\u023d\u0005F$\u000b\u023a\u023b\u0007I\u0002\u0002",
    "\u023b\u023d\u0005F$\u0005\u023c\u0235\u0003\u0002\u0002\u0002\u023c",
    "\u0237\u0003\u0002\u0002\u0002\u023c\u0238\u0003\u0002\u0002\u0002\u023c",
    "\u023a\u0003\u0002\u0002\u0002\u023d\u0265\u0003\u0002\u0002\u0002\u023e",
    "\u023f\f\t\u0002\u0002\u023f\u0240\t\u0006\u0002\u0002\u0240\u0264\u0005",
    "F$\n\u0241\u0242\f\b\u0002\u0002\u0242\u0243\t\u0005\u0002\u0002\u0243",
    "\u0264\u0005F$\t\u0244\u0245\f\u0007\u0002\u0002\u0245\u0246\t\u0007",
    "\u0002\u0002\u0246\u0264\u0005F$\b\u0247\u0248\f\u0006\u0002\u0002\u0248",
    "\u0249\t\b\u0002\u0002\u0249\u0264\u0005F$\u0007\u024a\u024b\f\u0004",
    "\u0002\u0002\u024b\u024c\t\t\u0002\u0002\u024c\u0264\u0005F$\u0005\u024d",
    "\u024e\f\u000f\u0002\u0002\u024e\u0251\u0007\r\u0002\u0002\u024f\u0252",
    "\u0005V,\u0002\u0250\u0252\u0005Z.\u0002\u0251\u024f\u0003\u0002\u0002",
    "\u0002\u0251\u0250\u0003\u0002\u0002\u0002\u0252\u0264\u0003\u0002\u0002",
    "\u0002\u0253\u0254\f\u000e\u0002\u0002\u0254\u0255\u0007\u0003\u0002",
    "\u0002\u0255\u0256\u0005F$\u0002\u0256\u0257\u0007\u0005\u0002\u0002",
    "\u0257\u0264\u0003\u0002\u0002\u0002\u0258\u0259\f\f\u0002\u0002\u0259",
    "\u025b\u0007\u000b\u0002\u0002\u025a\u025c\u0005@!\u0002\u025b\u025a",
    "\u0003\u0002\u0002\u0002\u025b\u025c\u0003\u0002\u0002\u0002\u025c\u025d",
    "\u0003\u0002\u0002\u0002\u025d\u0264\u0007\f\u0002\u0002\u025e\u025f",
    "\f\n\u0002\u0002\u025f\u0264\t\n\u0002\u0002\u0260\u0261\f\u0003\u0002",
    "\u0002\u0261\u0262\t\u000b\u0002\u0002\u0262\u0264\u0005L\'\u0002\u0263",
    "\u023e\u0003\u0002\u0002\u0002\u0263\u0241\u0003\u0002\u0002\u0002\u0263",
    "\u0244\u0003\u0002\u0002\u0002\u0263\u0247\u0003\u0002\u0002\u0002\u0263",
    "\u024a\u0003\u0002\u0002\u0002\u0263\u024d\u0003\u0002\u0002\u0002\u0263",
    "\u0253\u0003\u0002\u0002\u0002\u0263\u0258\u0003\u0002\u0002\u0002\u0263",
    "\u025e\u0003\u0002\u0002\u0002\u0263\u0260\u0003\u0002\u0002\u0002\u0264",
    "\u0267\u0003\u0002\u0002\u0002\u0265\u0263\u0003\u0002\u0002\u0002\u0265",
    "\u0266\u0003\u0002\u0002\u0002\u0266G\u0003\u0002\u0002\u0002\u0267",
    "\u0265\u0003\u0002\u0002\u0002\u0268\u0269\u0007\u000b\u0002\u0002\u0269",
    "\u026a\u0005F$\u0002\u026a\u026b\u0007\f\u0002\u0002\u026b\u0274\u0003",
    "\u0002\u0002\u0002\u026c\u0274\u0005J&\u0002\u026d\u0274\u0005V,\u0002",
    "\u026e\u026f\u0005Z.\u0002\u026f\u0270\u0007\u000b\u0002\u0002\u0270",
    "\u0271\u0005F$\u0002\u0271\u0272\u0007\f\u0002\u0002\u0272\u0274\u0003",
    "\u0002\u0002\u0002\u0273\u0268\u0003\u0002\u0002\u0002\u0273\u026c\u0003",
    "\u0002\u0002\u0002\u0273\u026d\u0003\u0002\u0002\u0002\u0273\u026e\u0003",
    "\u0002\u0002\u0002\u0274I\u0003\u0002\u0002\u0002\u0275\u027a\u0005",
    "N(\u0002\u0276\u027a\u0005P)\u0002\u0277\u027a\u0005R*\u0002\u0278\u027a",
    "\u0005T+\u0002\u0279\u0275\u0003\u0002\u0002\u0002\u0279\u0276\u0003",
    "\u0002\u0002\u0002\u0279\u0277\u0003\u0002\u0002\u0002\u0279\u0278\u0003",
    "\u0002\u0002\u0002\u027aK\u0003\u0002\u0002\u0002\u027b\u0281\u0005",
    "F$\u0002\u027c\u0281\u0005\u000e\b\u0002\u027d\u0281\u0005\u0010\t\u0002",
    "\u027e\u0281\u00052\u001a\u0002\u027f\u0281\u00056\u001c\u0002\u0280",
    "\u027b\u0003\u0002\u0002\u0002\u0280\u027c\u0003\u0002\u0002\u0002\u0280",
    "\u027d\u0003\u0002\u0002\u0002\u0280\u027e\u0003\u0002\u0002\u0002\u0280",
    "\u027f\u0003\u0002\u0002\u0002\u0281M\u0003\u0002\u0002\u0002\u0282",
    "\u0283\u0007^\u0002\u0002\u0283O\u0003\u0002\u0002\u0002\u0284\u0285",
    "\u0007]\u0002\u0002\u0285Q\u0003\u0002\u0002\u0002\u0286\u0287\t\f\u0002",
    "\u0002\u0287S\u0003\u0002\u0002\u0002\u0288\u0289\u0007C\u0002\u0002",
    "\u0289U\u0003\u0002\u0002\u0002\u028a\u028c\u0007_\u0002\u0002\u028b",
    "\u028d\u0007`\u0002\u0002\u028c\u028b\u0003\u0002\u0002\u0002\u028c",
    "\u028d\u0003\u0002\u0002\u0002\u028dW\u0003\u0002\u0002\u0002\u028e",
    "\u028f\u0007_\u0002\u0002\u028fY\u0003\u0002\u0002\u0002\u0290\u0291",
    "\t\r\u0002\u0002\u0291[\u0003\u0002\u0002\u0002\u0292\u0293\u0007a\u0002",
    "\u0002\u0293]\u0003\u0002\u0002\u0002\u0294\u0297\u0007b\u0002\u0002",
    "\u0295\u0297\u0005\\/\u0002\u0296\u0294\u0003\u0002\u0002\u0002\u0296",
    "\u0295\u0003\u0002\u0002\u0002\u0297\u029b\u0003\u0002\u0002\u0002\u0298",
    "\u029a\u0007b\u0002\u0002\u0299\u0298\u0003\u0002\u0002\u0002\u029a",
    "\u029d\u0003\u0002\u0002\u0002\u029b\u0299\u0003\u0002\u0002\u0002\u029b",
    "\u029c\u0003\u0002\u0002\u0002\u029c_\u0003\u0002\u0002\u0002\u029d",
    "\u029b\u0003\u0002\u0002\u0002\u029e\u02a1\u0005^0\u0002\u029f\u02a1",
    "\u0007\b\u0002\u0002\u02a0\u029e\u0003\u0002\u0002\u0002\u02a0\u029f",
    "\u0003\u0002\u0002\u0002\u02a1\u02a5\u0003\u0002\u0002\u0002\u02a2\u02a4",
    "\u0007b\u0002\u0002\u02a3\u02a2\u0003\u0002\u0002\u0002\u02a4\u02a7",
    "\u0003\u0002\u0002\u0002\u02a5\u02a3\u0003\u0002\u0002\u0002\u02a5\u02a6",
    "\u0003\u0002\u0002\u0002\u02a6a\u0003\u0002\u0002\u0002\u02a7\u02a5",
    "\u0003\u0002\u0002\u0002\\hnt}\u0083\u0089\u008e\u0096\u009c\u00aa\u00b0",
    "\u00b6\u00ba\u00bf\u00c5\u00c9\u00cc\u00d1\u00da\u00e0\u00e5\u00eb\u00ee",
    "\u00f3\u00fb\u010a\u0114\u0119\u011e\u0122\u0126\u0130\u0135\u0139\u013d",
    "\u0144\u0148\u014d\u0152\u0157\u015c\u0161\u0166\u016d\u0172\u0177\u017e",
    "\u0183\u018e\u0193\u0197\u0199\u019d\u01a6\u01ab\u01b3\u01b7\u01bc\u01c1",
    "\u01ca\u01ce\u01d3\u01d8\u01e0\u01e5\u01ea\u01f3\u01f8\u01fd\u0209\u020c",
    "\u0212\u0216\u021a\u0221\u0227\u022b\u023c\u0251\u025b\u0263\u0265\u0273",
    "\u0279\u0280\u028c\u0296\u029b\u02a0\u02a5"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'['", "','", "']'", "'{'", "'}'", "':'", "'='", 
                     "';'", "'('", "')'", "'.'", "'+'", "'-'", "'++'", "'--'", 
                     "'*'", "'/'", "'\\'", "'<<'", "'>>'", "'<'", "'>'", 
                     "'<>'", "'<='", "'>='", "'+='", "'-='", "'*='", "'/='", 
                     "'\\='", "'>>='", "'<<='", "'%='", null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, "'''", "'?'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, "AND", "AS", 
                      "BOOLEAN", "BOX", "CREATEOBJECT", "DIM", "DOUBLE", 
                      "DYNAMIC", "EACH", "ELSE", "ELSEIF", "END", "ENDFUNCTION", 
                      "ENDIF", "ENDSUB", "ENDWHILE", "EXIT", "EXITWHILE", 
                      "EVAL", "FALSE", "FLOAT", "FOR", "FUNCTION", "GETGLOBALAA", 
                      "GETLASTRUNCOMPILEERROR", "GETLASTRUNRUNTIMEERROR", 
                      "GOTO", "IF", "IN", "INTEGER", "INTERFACE", "INVALID", 
                      "LET", "LIBRARY", "LINE_NUM", "MOD", "NEXT", "NOT", 
                      "OBJECT", "OBJFUN", "OR", "POS", "PRINT", "REM", "RETURN", 
                      "RUN", "STEP", "STOP", "STRING", "SUB", "TAB", "THEN", 
                      "TO", "TRUE", "VOID", "TYPE", "WHILE", "STRING_LITERAL", 
                      "NUMERIC_LITERAL", "IDENTIFIER", "IDENTIFIER_TYPE_DECLARATION", 
                      "COMMENT", "NEWLINE", "WS", "SINGLE_QUOTE", "QUESTION_MARK" ];

var ruleNames =  [ "startRule", "component", "componentBody", "componentBodyElement", 
                   "block", "blockStatement", "arrayInitializer", "associativeArrayInitializer", 
                   "associativeElementInitializer", "dimStatement", "exitStatement", 
                   "forStatement", "forEachStatement", "ifThenElseStatement", 
                   "ifSingleLineStatement", "ifBlockStatement", "ifElseIfBlockStatement", 
                   "ifElseBlockStatement", "libraryStatement", "nextStatement", 
                   "printStatement", "returnStatement", "stopStatement", 
                   "whileStatement", "anonymousFunctionDeclaration", "functionDeclaration", 
                   "anonymousSubDeclaration", "subDeclaration", "parameterList", 
                   "parameter", "baseType", "expressionList", "globalFunctionInvocation", 
                   "globalFunction", "expression", "primary", "literal", 
                   "assignableExpression", "numericLiteral", "stringLiteral", 
                   "booleanLiteral", "invalidLiteral", "identifier", "untypedIdentifier", 
                   "reservedWord", "comment", "endOfLine", "endOfStatement" ];

function BrightScriptParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

BrightScriptParser.prototype = Object.create(antlr4.Parser.prototype);
BrightScriptParser.prototype.constructor = BrightScriptParser;

Object.defineProperty(BrightScriptParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

BrightScriptParser.EOF = antlr4.Token.EOF;
BrightScriptParser.T__0 = 1;
BrightScriptParser.T__1 = 2;
BrightScriptParser.T__2 = 3;
BrightScriptParser.T__3 = 4;
BrightScriptParser.T__4 = 5;
BrightScriptParser.T__5 = 6;
BrightScriptParser.T__6 = 7;
BrightScriptParser.T__7 = 8;
BrightScriptParser.T__8 = 9;
BrightScriptParser.T__9 = 10;
BrightScriptParser.T__10 = 11;
BrightScriptParser.T__11 = 12;
BrightScriptParser.T__12 = 13;
BrightScriptParser.T__13 = 14;
BrightScriptParser.T__14 = 15;
BrightScriptParser.T__15 = 16;
BrightScriptParser.T__16 = 17;
BrightScriptParser.T__17 = 18;
BrightScriptParser.T__18 = 19;
BrightScriptParser.T__19 = 20;
BrightScriptParser.T__20 = 21;
BrightScriptParser.T__21 = 22;
BrightScriptParser.T__22 = 23;
BrightScriptParser.T__23 = 24;
BrightScriptParser.T__24 = 25;
BrightScriptParser.T__25 = 26;
BrightScriptParser.T__26 = 27;
BrightScriptParser.T__27 = 28;
BrightScriptParser.T__28 = 29;
BrightScriptParser.T__29 = 30;
BrightScriptParser.T__30 = 31;
BrightScriptParser.T__31 = 32;
BrightScriptParser.T__32 = 33;
BrightScriptParser.AND = 34;
BrightScriptParser.AS = 35;
BrightScriptParser.BOOLEAN = 36;
BrightScriptParser.BOX = 37;
BrightScriptParser.CREATEOBJECT = 38;
BrightScriptParser.DIM = 39;
BrightScriptParser.DOUBLE = 40;
BrightScriptParser.DYNAMIC = 41;
BrightScriptParser.EACH = 42;
BrightScriptParser.ELSE = 43;
BrightScriptParser.ELSEIF = 44;
BrightScriptParser.END = 45;
BrightScriptParser.ENDFUNCTION = 46;
BrightScriptParser.ENDIF = 47;
BrightScriptParser.ENDSUB = 48;
BrightScriptParser.ENDWHILE = 49;
BrightScriptParser.EXIT = 50;
BrightScriptParser.EXITWHILE = 51;
BrightScriptParser.EVAL = 52;
BrightScriptParser.FALSE = 53;
BrightScriptParser.FLOAT = 54;
BrightScriptParser.FOR = 55;
BrightScriptParser.FUNCTION = 56;
BrightScriptParser.GETGLOBALAA = 57;
BrightScriptParser.GETLASTRUNCOMPILEERROR = 58;
BrightScriptParser.GETLASTRUNRUNTIMEERROR = 59;
BrightScriptParser.GOTO = 60;
BrightScriptParser.IF = 61;
BrightScriptParser.IN = 62;
BrightScriptParser.INTEGER = 63;
BrightScriptParser.INTERFACE = 64;
BrightScriptParser.INVALID = 65;
BrightScriptParser.LET = 66;
BrightScriptParser.LIBRARY = 67;
BrightScriptParser.LINE_NUM = 68;
BrightScriptParser.MOD = 69;
BrightScriptParser.NEXT = 70;
BrightScriptParser.NOT = 71;
BrightScriptParser.OBJECT = 72;
BrightScriptParser.OBJFUN = 73;
BrightScriptParser.OR = 74;
BrightScriptParser.POS = 75;
BrightScriptParser.PRINT = 76;
BrightScriptParser.REM = 77;
BrightScriptParser.RETURN = 78;
BrightScriptParser.RUN = 79;
BrightScriptParser.STEP = 80;
BrightScriptParser.STOP = 81;
BrightScriptParser.STRING = 82;
BrightScriptParser.SUB = 83;
BrightScriptParser.TAB = 84;
BrightScriptParser.THEN = 85;
BrightScriptParser.TO = 86;
BrightScriptParser.TRUE = 87;
BrightScriptParser.VOID = 88;
BrightScriptParser.TYPE = 89;
BrightScriptParser.WHILE = 90;
BrightScriptParser.STRING_LITERAL = 91;
BrightScriptParser.NUMERIC_LITERAL = 92;
BrightScriptParser.IDENTIFIER = 93;
BrightScriptParser.IDENTIFIER_TYPE_DECLARATION = 94;
BrightScriptParser.COMMENT = 95;
BrightScriptParser.NEWLINE = 96;
BrightScriptParser.WS = 97;
BrightScriptParser.SINGLE_QUOTE = 98;
BrightScriptParser.QUESTION_MARK = 99;

BrightScriptParser.RULE_startRule = 0;
BrightScriptParser.RULE_component = 1;
BrightScriptParser.RULE_componentBody = 2;
BrightScriptParser.RULE_componentBodyElement = 3;
BrightScriptParser.RULE_block = 4;
BrightScriptParser.RULE_blockStatement = 5;
BrightScriptParser.RULE_arrayInitializer = 6;
BrightScriptParser.RULE_associativeArrayInitializer = 7;
BrightScriptParser.RULE_associativeElementInitializer = 8;
BrightScriptParser.RULE_dimStatement = 9;
BrightScriptParser.RULE_exitStatement = 10;
BrightScriptParser.RULE_forStatement = 11;
BrightScriptParser.RULE_forEachStatement = 12;
BrightScriptParser.RULE_ifThenElseStatement = 13;
BrightScriptParser.RULE_ifSingleLineStatement = 14;
BrightScriptParser.RULE_ifBlockStatement = 15;
BrightScriptParser.RULE_ifElseIfBlockStatement = 16;
BrightScriptParser.RULE_ifElseBlockStatement = 17;
BrightScriptParser.RULE_libraryStatement = 18;
BrightScriptParser.RULE_nextStatement = 19;
BrightScriptParser.RULE_printStatement = 20;
BrightScriptParser.RULE_returnStatement = 21;
BrightScriptParser.RULE_stopStatement = 22;
BrightScriptParser.RULE_whileStatement = 23;
BrightScriptParser.RULE_anonymousFunctionDeclaration = 24;
BrightScriptParser.RULE_functionDeclaration = 25;
BrightScriptParser.RULE_anonymousSubDeclaration = 26;
BrightScriptParser.RULE_subDeclaration = 27;
BrightScriptParser.RULE_parameterList = 28;
BrightScriptParser.RULE_parameter = 29;
BrightScriptParser.RULE_baseType = 30;
BrightScriptParser.RULE_expressionList = 31;
BrightScriptParser.RULE_globalFunctionInvocation = 32;
BrightScriptParser.RULE_globalFunction = 33;
BrightScriptParser.RULE_expression = 34;
BrightScriptParser.RULE_primary = 35;
BrightScriptParser.RULE_literal = 36;
BrightScriptParser.RULE_assignableExpression = 37;
BrightScriptParser.RULE_numericLiteral = 38;
BrightScriptParser.RULE_stringLiteral = 39;
BrightScriptParser.RULE_booleanLiteral = 40;
BrightScriptParser.RULE_invalidLiteral = 41;
BrightScriptParser.RULE_identifier = 42;
BrightScriptParser.RULE_untypedIdentifier = 43;
BrightScriptParser.RULE_reservedWord = 44;
BrightScriptParser.RULE_comment = 45;
BrightScriptParser.RULE_endOfLine = 46;
BrightScriptParser.RULE_endOfStatement = 47;

function StartRuleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_startRule;
    return this;
}

StartRuleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartRuleContext.prototype.constructor = StartRuleContext;

StartRuleContext.prototype.component = function() {
    return this.getTypedRuleContext(ComponentContext,0);
};

StartRuleContext.prototype.EOF = function() {
    return this.getToken(BrightScriptParser.EOF, 0);
};

StartRuleContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterStartRule(this);
	}
};

StartRuleContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitStartRule(this);
	}
};

StartRuleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitStartRule(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.StartRuleContext = StartRuleContext;

BrightScriptParser.prototype.startRule = function() {

    var localctx = new StartRuleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, BrightScriptParser.RULE_startRule);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 96;
        this.component();
        this.state = 97;
        this.match(BrightScriptParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComponentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_component;
    return this;
}

ComponentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentContext.prototype.constructor = ComponentContext;

ComponentContext.prototype.componentBody = function() {
    return this.getTypedRuleContext(ComponentBodyContext,0);
};

ComponentContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

ComponentContext.prototype.libraryStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LibraryStatementContext);
    } else {
        return this.getTypedRuleContext(LibraryStatementContext,i);
    }
};

ComponentContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterComponent(this);
	}
};

ComponentContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitComponent(this);
	}
};

ComponentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitComponent(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ComponentContext = ComponentContext;

BrightScriptParser.prototype.component = function() {

    var localctx = new ComponentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, BrightScriptParser.RULE_component);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 102;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 99;
                this.endOfLine(); 
            }
            this.state = 104;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
        }

        this.state = 108;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===BrightScriptParser.LIBRARY) {
            this.state = 105;
            this.libraryStatement();
            this.state = 110;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 114;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===BrightScriptParser.COMMENT || _la===BrightScriptParser.NEWLINE) {
            this.state = 111;
            this.endOfLine();
            this.state = 116;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 117;
        this.componentBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComponentBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_componentBody;
    return this;
}

ComponentBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentBodyContext.prototype.constructor = ComponentBodyContext;

ComponentBodyContext.prototype.componentBodyElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ComponentBodyElementContext);
    } else {
        return this.getTypedRuleContext(ComponentBodyElementContext,i);
    }
};

ComponentBodyContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

ComponentBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterComponentBody(this);
	}
};

ComponentBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitComponentBody(this);
	}
};

ComponentBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitComponentBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ComponentBodyContext = ComponentBodyContext;

BrightScriptParser.prototype.componentBody = function() {

    var localctx = new ComponentBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, BrightScriptParser.RULE_componentBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 119;
        this.componentBodyElement();
        this.state = 129;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 121; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 120;
                    this.endOfLine();
                    this.state = 123; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===BrightScriptParser.COMMENT || _la===BrightScriptParser.NEWLINE);
                this.state = 125;
                this.componentBodyElement(); 
            }
            this.state = 131;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
        }

        this.state = 135;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===BrightScriptParser.COMMENT || _la===BrightScriptParser.NEWLINE) {
            this.state = 132;
            this.endOfLine();
            this.state = 137;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComponentBodyElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_componentBodyElement;
    return this;
}

ComponentBodyElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComponentBodyElementContext.prototype.constructor = ComponentBodyElementContext;

ComponentBodyElementContext.prototype.functionDeclaration = function() {
    return this.getTypedRuleContext(FunctionDeclarationContext,0);
};

ComponentBodyElementContext.prototype.subDeclaration = function() {
    return this.getTypedRuleContext(SubDeclarationContext,0);
};

ComponentBodyElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterComponentBodyElement(this);
	}
};

ComponentBodyElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitComponentBodyElement(this);
	}
};

ComponentBodyElementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitComponentBodyElement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ComponentBodyElementContext = ComponentBodyElementContext;

BrightScriptParser.prototype.componentBodyElement = function() {

    var localctx = new ComponentBodyElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, BrightScriptParser.RULE_componentBodyElement);
    try {
        this.state = 140;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.FUNCTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 138;
            this.functionDeclaration();
            break;
        case BrightScriptParser.SUB:
            this.enterOuterAlt(localctx, 2);
            this.state = 139;
            this.subDeclaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.blockStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockStatementContext);
    } else {
        return this.getTypedRuleContext(BlockStatementContext,i);
    }
};

BlockContext.prototype.endOfStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfStatementContext);
    } else {
        return this.getTypedRuleContext(EndOfStatementContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitBlock(this);
	}
};

BlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.BlockContext = BlockContext;

BrightScriptParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, BrightScriptParser.RULE_block);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 142;
        this.blockStatement();
        this.state = 148;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,7,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 143;
                this.endOfStatement();
                this.state = 144;
                this.blockStatement(); 
            }
            this.state = 150;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,7,this._ctx);
        }

        this.state = 152; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 151;
        		this.endOfStatement();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 154; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,8, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_blockStatement;
    return this;
}

BlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockStatementContext.prototype.constructor = BlockStatementContext;

BlockStatementContext.prototype.comment = function() {
    return this.getTypedRuleContext(CommentContext,0);
};

BlockStatementContext.prototype.dimStatement = function() {
    return this.getTypedRuleContext(DimStatementContext,0);
};

BlockStatementContext.prototype.exitStatement = function() {
    return this.getTypedRuleContext(ExitStatementContext,0);
};

BlockStatementContext.prototype.forStatement = function() {
    return this.getTypedRuleContext(ForStatementContext,0);
};

BlockStatementContext.prototype.forEachStatement = function() {
    return this.getTypedRuleContext(ForEachStatementContext,0);
};

BlockStatementContext.prototype.ifThenElseStatement = function() {
    return this.getTypedRuleContext(IfThenElseStatementContext,0);
};

BlockStatementContext.prototype.nextStatement = function() {
    return this.getTypedRuleContext(NextStatementContext,0);
};

BlockStatementContext.prototype.printStatement = function() {
    return this.getTypedRuleContext(PrintStatementContext,0);
};

BlockStatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

BlockStatementContext.prototype.stopStatement = function() {
    return this.getTypedRuleContext(StopStatementContext,0);
};

BlockStatementContext.prototype.whileStatement = function() {
    return this.getTypedRuleContext(WhileStatementContext,0);
};

BlockStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterBlockStatement(this);
	}
};

BlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitBlockStatement(this);
	}
};

BlockStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitBlockStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.BlockStatementContext = BlockStatementContext;

BrightScriptParser.prototype.blockStatement = function() {

    var localctx = new BlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, BrightScriptParser.RULE_blockStatement);
    try {
        this.state = 168;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 156;
            this.comment();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 157;
            this.dimStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 158;
            this.exitStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 159;
            this.forStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 160;
            this.forEachStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 161;
            this.ifThenElseStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 162;
            this.nextStatement();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 163;
            this.printStatement();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 164;
            this.returnStatement();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 165;
            this.stopStatement();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 166;
            this.whileStatement();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 167;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_arrayInitializer;
    return this;
}

ArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayInitializerContext.prototype.constructor = ArrayInitializerContext;

ArrayInitializerContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.NEWLINE);
    } else {
        return this.getToken(BrightScriptParser.NEWLINE, i);
    }
};


ArrayInitializerContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArrayInitializerContext.prototype.arrayInitializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrayInitializerContext);
    } else {
        return this.getTypedRuleContext(ArrayInitializerContext,i);
    }
};

ArrayInitializerContext.prototype.associativeArrayInitializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssociativeArrayInitializerContext);
    } else {
        return this.getTypedRuleContext(AssociativeArrayInitializerContext,i);
    }
};

ArrayInitializerContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

ArrayInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterArrayInitializer(this);
	}
};

ArrayInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitArrayInitializer(this);
	}
};

ArrayInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitArrayInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ArrayInitializerContext = ArrayInitializerContext;

BrightScriptParser.prototype.arrayInitializer = function() {

    var localctx = new ArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, BrightScriptParser.RULE_arrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 170;
        this.match(BrightScriptParser.T__0);
        this.state = 174;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 171;
                this.match(BrightScriptParser.NEWLINE); 
            }
            this.state = 176;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
        }

        this.state = 202;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BrightScriptParser.T__0) | (1 << BrightScriptParser.T__3) | (1 << BrightScriptParser.T__8) | (1 << BrightScriptParser.T__11) | (1 << BrightScriptParser.T__12))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (BrightScriptParser.AND - 34)) | (1 << (BrightScriptParser.BOX - 34)) | (1 << (BrightScriptParser.CREATEOBJECT - 34)) | (1 << (BrightScriptParser.DIM - 34)) | (1 << (BrightScriptParser.EACH - 34)) | (1 << (BrightScriptParser.ELSE - 34)) | (1 << (BrightScriptParser.ELSEIF - 34)) | (1 << (BrightScriptParser.END - 34)) | (1 << (BrightScriptParser.ENDFUNCTION - 34)) | (1 << (BrightScriptParser.ENDIF - 34)) | (1 << (BrightScriptParser.ENDSUB - 34)) | (1 << (BrightScriptParser.ENDWHILE - 34)) | (1 << (BrightScriptParser.EXIT - 34)) | (1 << (BrightScriptParser.EXITWHILE - 34)) | (1 << (BrightScriptParser.EVAL - 34)) | (1 << (BrightScriptParser.FALSE - 34)) | (1 << (BrightScriptParser.FOR - 34)) | (1 << (BrightScriptParser.FUNCTION - 34)) | (1 << (BrightScriptParser.GETGLOBALAA - 34)) | (1 << (BrightScriptParser.GETLASTRUNCOMPILEERROR - 34)) | (1 << (BrightScriptParser.GETLASTRUNRUNTIMEERROR - 34)) | (1 << (BrightScriptParser.GOTO - 34)) | (1 << (BrightScriptParser.IF - 34)) | (1 << (BrightScriptParser.INVALID - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (BrightScriptParser.LET - 66)) | (1 << (BrightScriptParser.LINE_NUM - 66)) | (1 << (BrightScriptParser.NEXT - 66)) | (1 << (BrightScriptParser.NOT - 66)) | (1 << (BrightScriptParser.OBJFUN - 66)) | (1 << (BrightScriptParser.OR - 66)) | (1 << (BrightScriptParser.POS - 66)) | (1 << (BrightScriptParser.PRINT - 66)) | (1 << (BrightScriptParser.REM - 66)) | (1 << (BrightScriptParser.RETURN - 66)) | (1 << (BrightScriptParser.RUN - 66)) | (1 << (BrightScriptParser.STEP - 66)) | (1 << (BrightScriptParser.STOP - 66)) | (1 << (BrightScriptParser.STRING - 66)) | (1 << (BrightScriptParser.SUB - 66)) | (1 << (BrightScriptParser.TAB - 66)) | (1 << (BrightScriptParser.THEN - 66)) | (1 << (BrightScriptParser.TO - 66)) | (1 << (BrightScriptParser.TRUE - 66)) | (1 << (BrightScriptParser.TYPE - 66)) | (1 << (BrightScriptParser.WHILE - 66)) | (1 << (BrightScriptParser.STRING_LITERAL - 66)) | (1 << (BrightScriptParser.NUMERIC_LITERAL - 66)) | (1 << (BrightScriptParser.IDENTIFIER - 66)))) !== 0)) {
            this.state = 180;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case BrightScriptParser.T__8:
            case BrightScriptParser.T__11:
            case BrightScriptParser.T__12:
            case BrightScriptParser.AND:
            case BrightScriptParser.BOX:
            case BrightScriptParser.CREATEOBJECT:
            case BrightScriptParser.DIM:
            case BrightScriptParser.EACH:
            case BrightScriptParser.ELSE:
            case BrightScriptParser.ELSEIF:
            case BrightScriptParser.END:
            case BrightScriptParser.ENDFUNCTION:
            case BrightScriptParser.ENDIF:
            case BrightScriptParser.ENDSUB:
            case BrightScriptParser.ENDWHILE:
            case BrightScriptParser.EXIT:
            case BrightScriptParser.EXITWHILE:
            case BrightScriptParser.EVAL:
            case BrightScriptParser.FALSE:
            case BrightScriptParser.FOR:
            case BrightScriptParser.FUNCTION:
            case BrightScriptParser.GETGLOBALAA:
            case BrightScriptParser.GETLASTRUNCOMPILEERROR:
            case BrightScriptParser.GETLASTRUNRUNTIMEERROR:
            case BrightScriptParser.GOTO:
            case BrightScriptParser.IF:
            case BrightScriptParser.INVALID:
            case BrightScriptParser.LET:
            case BrightScriptParser.LINE_NUM:
            case BrightScriptParser.NEXT:
            case BrightScriptParser.NOT:
            case BrightScriptParser.OBJFUN:
            case BrightScriptParser.OR:
            case BrightScriptParser.POS:
            case BrightScriptParser.PRINT:
            case BrightScriptParser.REM:
            case BrightScriptParser.RETURN:
            case BrightScriptParser.RUN:
            case BrightScriptParser.STEP:
            case BrightScriptParser.STOP:
            case BrightScriptParser.STRING:
            case BrightScriptParser.SUB:
            case BrightScriptParser.TAB:
            case BrightScriptParser.THEN:
            case BrightScriptParser.TO:
            case BrightScriptParser.TRUE:
            case BrightScriptParser.TYPE:
            case BrightScriptParser.WHILE:
            case BrightScriptParser.STRING_LITERAL:
            case BrightScriptParser.NUMERIC_LITERAL:
            case BrightScriptParser.IDENTIFIER:
                this.state = 177;
                this.expression(0);
                break;
            case BrightScriptParser.T__0:
                this.state = 178;
                this.arrayInitializer();
                break;
            case BrightScriptParser.T__3:
                this.state = 179;
                this.associativeArrayInitializer();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 199;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 184;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case BrightScriptParser.T__1:
                        this.state = 182;
                        this.match(BrightScriptParser.T__1);
                        break;
                    case BrightScriptParser.COMMENT:
                    case BrightScriptParser.NEWLINE:
                        this.state = 183;
                        this.endOfLine();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 189;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===BrightScriptParser.NEWLINE) {
                        this.state = 186;
                        this.match(BrightScriptParser.NEWLINE);
                        this.state = 191;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 195;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case BrightScriptParser.T__8:
                    case BrightScriptParser.T__11:
                    case BrightScriptParser.T__12:
                    case BrightScriptParser.AND:
                    case BrightScriptParser.BOX:
                    case BrightScriptParser.CREATEOBJECT:
                    case BrightScriptParser.DIM:
                    case BrightScriptParser.EACH:
                    case BrightScriptParser.ELSE:
                    case BrightScriptParser.ELSEIF:
                    case BrightScriptParser.END:
                    case BrightScriptParser.ENDFUNCTION:
                    case BrightScriptParser.ENDIF:
                    case BrightScriptParser.ENDSUB:
                    case BrightScriptParser.ENDWHILE:
                    case BrightScriptParser.EXIT:
                    case BrightScriptParser.EXITWHILE:
                    case BrightScriptParser.EVAL:
                    case BrightScriptParser.FALSE:
                    case BrightScriptParser.FOR:
                    case BrightScriptParser.FUNCTION:
                    case BrightScriptParser.GETGLOBALAA:
                    case BrightScriptParser.GETLASTRUNCOMPILEERROR:
                    case BrightScriptParser.GETLASTRUNRUNTIMEERROR:
                    case BrightScriptParser.GOTO:
                    case BrightScriptParser.IF:
                    case BrightScriptParser.INVALID:
                    case BrightScriptParser.LET:
                    case BrightScriptParser.LINE_NUM:
                    case BrightScriptParser.NEXT:
                    case BrightScriptParser.NOT:
                    case BrightScriptParser.OBJFUN:
                    case BrightScriptParser.OR:
                    case BrightScriptParser.POS:
                    case BrightScriptParser.PRINT:
                    case BrightScriptParser.REM:
                    case BrightScriptParser.RETURN:
                    case BrightScriptParser.RUN:
                    case BrightScriptParser.STEP:
                    case BrightScriptParser.STOP:
                    case BrightScriptParser.STRING:
                    case BrightScriptParser.SUB:
                    case BrightScriptParser.TAB:
                    case BrightScriptParser.THEN:
                    case BrightScriptParser.TO:
                    case BrightScriptParser.TRUE:
                    case BrightScriptParser.TYPE:
                    case BrightScriptParser.WHILE:
                    case BrightScriptParser.STRING_LITERAL:
                    case BrightScriptParser.NUMERIC_LITERAL:
                    case BrightScriptParser.IDENTIFIER:
                        this.state = 192;
                        this.expression(0);
                        break;
                    case BrightScriptParser.T__0:
                        this.state = 193;
                        this.arrayInitializer();
                        break;
                    case BrightScriptParser.T__3:
                        this.state = 194;
                        this.associativeArrayInitializer();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 201;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
            }

        }

        this.state = 207;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===BrightScriptParser.NEWLINE) {
            this.state = 204;
            this.match(BrightScriptParser.NEWLINE);
            this.state = 209;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 210;
        this.match(BrightScriptParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssociativeArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_associativeArrayInitializer;
    return this;
}

AssociativeArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssociativeArrayInitializerContext.prototype.constructor = AssociativeArrayInitializerContext;

AssociativeArrayInitializerContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.NEWLINE);
    } else {
        return this.getToken(BrightScriptParser.NEWLINE, i);
    }
};


AssociativeArrayInitializerContext.prototype.associativeElementInitializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssociativeElementInitializerContext);
    } else {
        return this.getTypedRuleContext(AssociativeElementInitializerContext,i);
    }
};

AssociativeArrayInitializerContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

AssociativeArrayInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterAssociativeArrayInitializer(this);
	}
};

AssociativeArrayInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitAssociativeArrayInitializer(this);
	}
};

AssociativeArrayInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitAssociativeArrayInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.AssociativeArrayInitializerContext = AssociativeArrayInitializerContext;

BrightScriptParser.prototype.associativeArrayInitializer = function() {

    var localctx = new AssociativeArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, BrightScriptParser.RULE_associativeArrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 212;
        this.match(BrightScriptParser.T__3);
        this.state = 216;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,18,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 213;
                this.match(BrightScriptParser.NEWLINE); 
            }
            this.state = 218;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,18,this._ctx);
        }

        this.state = 236;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (BrightScriptParser.AND - 34)) | (1 << (BrightScriptParser.BOX - 34)) | (1 << (BrightScriptParser.CREATEOBJECT - 34)) | (1 << (BrightScriptParser.DIM - 34)) | (1 << (BrightScriptParser.EACH - 34)) | (1 << (BrightScriptParser.ELSE - 34)) | (1 << (BrightScriptParser.ELSEIF - 34)) | (1 << (BrightScriptParser.END - 34)) | (1 << (BrightScriptParser.ENDFUNCTION - 34)) | (1 << (BrightScriptParser.ENDIF - 34)) | (1 << (BrightScriptParser.ENDSUB - 34)) | (1 << (BrightScriptParser.ENDWHILE - 34)) | (1 << (BrightScriptParser.EXIT - 34)) | (1 << (BrightScriptParser.EXITWHILE - 34)) | (1 << (BrightScriptParser.EVAL - 34)) | (1 << (BrightScriptParser.FALSE - 34)) | (1 << (BrightScriptParser.FOR - 34)) | (1 << (BrightScriptParser.FUNCTION - 34)) | (1 << (BrightScriptParser.GETGLOBALAA - 34)) | (1 << (BrightScriptParser.GETLASTRUNCOMPILEERROR - 34)) | (1 << (BrightScriptParser.GETLASTRUNRUNTIMEERROR - 34)) | (1 << (BrightScriptParser.GOTO - 34)) | (1 << (BrightScriptParser.IF - 34)) | (1 << (BrightScriptParser.INVALID - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (BrightScriptParser.LET - 66)) | (1 << (BrightScriptParser.LINE_NUM - 66)) | (1 << (BrightScriptParser.NEXT - 66)) | (1 << (BrightScriptParser.NOT - 66)) | (1 << (BrightScriptParser.OBJFUN - 66)) | (1 << (BrightScriptParser.OR - 66)) | (1 << (BrightScriptParser.POS - 66)) | (1 << (BrightScriptParser.PRINT - 66)) | (1 << (BrightScriptParser.REM - 66)) | (1 << (BrightScriptParser.RETURN - 66)) | (1 << (BrightScriptParser.RUN - 66)) | (1 << (BrightScriptParser.STEP - 66)) | (1 << (BrightScriptParser.STOP - 66)) | (1 << (BrightScriptParser.SUB - 66)) | (1 << (BrightScriptParser.TAB - 66)) | (1 << (BrightScriptParser.THEN - 66)) | (1 << (BrightScriptParser.TO - 66)) | (1 << (BrightScriptParser.TRUE - 66)) | (1 << (BrightScriptParser.TYPE - 66)) | (1 << (BrightScriptParser.WHILE - 66)) | (1 << (BrightScriptParser.STRING_LITERAL - 66)) | (1 << (BrightScriptParser.IDENTIFIER - 66)))) !== 0)) {
            this.state = 219;
            this.associativeElementInitializer();
            this.state = 233;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 222;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case BrightScriptParser.T__1:
                        this.state = 220;
                        this.match(BrightScriptParser.T__1);
                        break;
                    case BrightScriptParser.COMMENT:
                    case BrightScriptParser.NEWLINE:
                        this.state = 221;
                        this.endOfLine();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 227;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===BrightScriptParser.NEWLINE) {
                        this.state = 224;
                        this.match(BrightScriptParser.NEWLINE);
                        this.state = 229;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 230;
                    this.associativeElementInitializer(); 
                }
                this.state = 235;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
            }

        }

        this.state = 241;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===BrightScriptParser.NEWLINE) {
            this.state = 238;
            this.match(BrightScriptParser.NEWLINE);
            this.state = 243;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 244;
        this.match(BrightScriptParser.T__4);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssociativeElementInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_associativeElementInitializer;
    return this;
}

AssociativeElementInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssociativeElementInitializerContext.prototype.constructor = AssociativeElementInitializerContext;

AssociativeElementInitializerContext.prototype.assignableExpression = function() {
    return this.getTypedRuleContext(AssignableExpressionContext,0);
};

AssociativeElementInitializerContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AssociativeElementInitializerContext.prototype.reservedWord = function() {
    return this.getTypedRuleContext(ReservedWordContext,0);
};

AssociativeElementInitializerContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

AssociativeElementInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterAssociativeElementInitializer(this);
	}
};

AssociativeElementInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitAssociativeElementInitializer(this);
	}
};

AssociativeElementInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitAssociativeElementInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.AssociativeElementInitializerContext = AssociativeElementInitializerContext;

BrightScriptParser.prototype.associativeElementInitializer = function() {

    var localctx = new AssociativeElementInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, BrightScriptParser.RULE_associativeElementInitializer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 249;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.IDENTIFIER:
            this.state = 246;
            this.identifier();
            break;
        case BrightScriptParser.AND:
        case BrightScriptParser.BOX:
        case BrightScriptParser.CREATEOBJECT:
        case BrightScriptParser.DIM:
        case BrightScriptParser.EACH:
        case BrightScriptParser.ELSE:
        case BrightScriptParser.ELSEIF:
        case BrightScriptParser.END:
        case BrightScriptParser.ENDFUNCTION:
        case BrightScriptParser.ENDIF:
        case BrightScriptParser.ENDSUB:
        case BrightScriptParser.ENDWHILE:
        case BrightScriptParser.EXIT:
        case BrightScriptParser.EXITWHILE:
        case BrightScriptParser.EVAL:
        case BrightScriptParser.FALSE:
        case BrightScriptParser.FOR:
        case BrightScriptParser.FUNCTION:
        case BrightScriptParser.GETGLOBALAA:
        case BrightScriptParser.GETLASTRUNCOMPILEERROR:
        case BrightScriptParser.GETLASTRUNRUNTIMEERROR:
        case BrightScriptParser.GOTO:
        case BrightScriptParser.IF:
        case BrightScriptParser.INVALID:
        case BrightScriptParser.LET:
        case BrightScriptParser.LINE_NUM:
        case BrightScriptParser.NEXT:
        case BrightScriptParser.NOT:
        case BrightScriptParser.OBJFUN:
        case BrightScriptParser.OR:
        case BrightScriptParser.POS:
        case BrightScriptParser.PRINT:
        case BrightScriptParser.REM:
        case BrightScriptParser.RETURN:
        case BrightScriptParser.RUN:
        case BrightScriptParser.STEP:
        case BrightScriptParser.STOP:
        case BrightScriptParser.SUB:
        case BrightScriptParser.TAB:
        case BrightScriptParser.THEN:
        case BrightScriptParser.TO:
        case BrightScriptParser.TRUE:
        case BrightScriptParser.TYPE:
        case BrightScriptParser.WHILE:
            this.state = 247;
            this.reservedWord();
            break;
        case BrightScriptParser.STRING_LITERAL:
            this.state = 248;
            this.stringLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 251;
        this.match(BrightScriptParser.T__5);
        this.state = 252;
        this.assignableExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DimStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_dimStatement;
    return this;
}

DimStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DimStatementContext.prototype.constructor = DimStatementContext;

DimStatementContext.prototype.DIM = function() {
    return this.getToken(BrightScriptParser.DIM, 0);
};

DimStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

DimStatementContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

DimStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterDimStatement(this);
	}
};

DimStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitDimStatement(this);
	}
};

DimStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitDimStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.DimStatementContext = DimStatementContext;

BrightScriptParser.prototype.dimStatement = function() {

    var localctx = new DimStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, BrightScriptParser.RULE_dimStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 254;
        this.match(BrightScriptParser.DIM);
        this.state = 255;
        this.identifier();
        this.state = 256;
        this.match(BrightScriptParser.T__0);
        this.state = 257;
        this.parameterList();
        this.state = 258;
        this.match(BrightScriptParser.T__2);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExitStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_exitStatement;
    return this;
}

ExitStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExitStatementContext.prototype.constructor = ExitStatementContext;

ExitStatementContext.prototype.EXIT = function() {
    return this.getToken(BrightScriptParser.EXIT, 0);
};

ExitStatementContext.prototype.WHILE = function() {
    return this.getToken(BrightScriptParser.WHILE, 0);
};

ExitStatementContext.prototype.FOR = function() {
    return this.getToken(BrightScriptParser.FOR, 0);
};

ExitStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterExitStatement(this);
	}
};

ExitStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitExitStatement(this);
	}
};

ExitStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitExitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ExitStatementContext = ExitStatementContext;

BrightScriptParser.prototype.exitStatement = function() {

    var localctx = new ExitStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, BrightScriptParser.RULE_exitStatement);
    try {
        this.state = 264;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 260;
            this.match(BrightScriptParser.EXIT);
            this.state = 261;
            this.match(BrightScriptParser.WHILE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 262;
            this.match(BrightScriptParser.EXIT);
            this.state = 263;
            this.match(BrightScriptParser.FOR);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_forStatement;
    return this;
}

ForStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForStatementContext.prototype.constructor = ForStatementContext;

ForStatementContext.prototype.FOR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.FOR);
    } else {
        return this.getToken(BrightScriptParser.FOR, i);
    }
};


ForStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ForStatementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ForStatementContext.prototype.TO = function() {
    return this.getToken(BrightScriptParser.TO, 0);
};

ForStatementContext.prototype.STEP = function() {
    return this.getToken(BrightScriptParser.STEP, 0);
};

ForStatementContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

ForStatementContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

ForStatementContext.prototype.nextStatement = function() {
    return this.getTypedRuleContext(NextStatementContext,0);
};

ForStatementContext.prototype.END = function() {
    return this.getToken(BrightScriptParser.END, 0);
};

ForStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterForStatement(this);
	}
};

ForStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitForStatement(this);
	}
};

ForStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitForStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ForStatementContext = ForStatementContext;

BrightScriptParser.prototype.forStatement = function() {

    var localctx = new ForStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, BrightScriptParser.RULE_forStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 266;
        this.match(BrightScriptParser.FOR);
        this.state = 267;
        this.identifier();
        this.state = 268;
        this.match(BrightScriptParser.T__6);
        this.state = 269;
        this.expression(0);
        this.state = 270;
        this.match(BrightScriptParser.TO);
        this.state = 271;
        this.expression(0);
        this.state = 274;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.STEP) {
            this.state = 272;
            this.match(BrightScriptParser.STEP);
            this.state = 273;
            this.expression(0);
        }

        this.state = 277; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 276;
        		this.endOfLine();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 279; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,27, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 284;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 281;
                this.block(); 
            }
            this.state = 286;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
        }

        this.state = 288;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.NEXT) {
            this.state = 287;
            this.nextStatement();
        }

        this.state = 292;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.END) {
            this.state = 290;
            this.match(BrightScriptParser.END);
            this.state = 291;
            this.match(BrightScriptParser.FOR);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForEachStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_forEachStatement;
    return this;
}

ForEachStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForEachStatementContext.prototype.constructor = ForEachStatementContext;

ForEachStatementContext.prototype.FOR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.FOR);
    } else {
        return this.getToken(BrightScriptParser.FOR, i);
    }
};


ForEachStatementContext.prototype.EACH = function() {
    return this.getToken(BrightScriptParser.EACH, 0);
};

ForEachStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ForEachStatementContext.prototype.IN = function() {
    return this.getToken(BrightScriptParser.IN, 0);
};

ForEachStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForEachStatementContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

ForEachStatementContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

ForEachStatementContext.prototype.nextStatement = function() {
    return this.getTypedRuleContext(NextStatementContext,0);
};

ForEachStatementContext.prototype.END = function() {
    return this.getToken(BrightScriptParser.END, 0);
};

ForEachStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterForEachStatement(this);
	}
};

ForEachStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitForEachStatement(this);
	}
};

ForEachStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitForEachStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ForEachStatementContext = ForEachStatementContext;

BrightScriptParser.prototype.forEachStatement = function() {

    var localctx = new ForEachStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, BrightScriptParser.RULE_forEachStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 294;
        this.match(BrightScriptParser.FOR);
        this.state = 295;
        this.match(BrightScriptParser.EACH);
        this.state = 296;
        this.identifier();
        this.state = 297;
        this.match(BrightScriptParser.IN);
        this.state = 298;
        this.expression(0);
        this.state = 300; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 299;
        		this.endOfLine();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 302; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,31, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 307;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,32,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 304;
                this.block(); 
            }
            this.state = 309;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,32,this._ctx);
        }

        this.state = 311;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.NEXT) {
            this.state = 310;
            this.nextStatement();
        }

        this.state = 315;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.END) {
            this.state = 313;
            this.match(BrightScriptParser.END);
            this.state = 314;
            this.match(BrightScriptParser.FOR);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfThenElseStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_ifThenElseStatement;
    return this;
}

IfThenElseStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfThenElseStatementContext.prototype.constructor = IfThenElseStatementContext;

IfThenElseStatementContext.prototype.ifSingleLineStatement = function() {
    return this.getTypedRuleContext(IfSingleLineStatementContext,0);
};

IfThenElseStatementContext.prototype.ifBlockStatement = function() {
    return this.getTypedRuleContext(IfBlockStatementContext,0);
};

IfThenElseStatementContext.prototype.END = function() {
    return this.getToken(BrightScriptParser.END, 0);
};

IfThenElseStatementContext.prototype.IF = function() {
    return this.getToken(BrightScriptParser.IF, 0);
};

IfThenElseStatementContext.prototype.ifElseIfBlockStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IfElseIfBlockStatementContext);
    } else {
        return this.getTypedRuleContext(IfElseIfBlockStatementContext,i);
    }
};

IfThenElseStatementContext.prototype.ifElseBlockStatement = function() {
    return this.getTypedRuleContext(IfElseBlockStatementContext,0);
};

IfThenElseStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterIfThenElseStatement(this);
	}
};

IfThenElseStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitIfThenElseStatement(this);
	}
};

IfThenElseStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitIfThenElseStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.IfThenElseStatementContext = IfThenElseStatementContext;

BrightScriptParser.prototype.ifThenElseStatement = function() {

    var localctx = new IfThenElseStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, BrightScriptParser.RULE_ifThenElseStatement);
    var _la = 0; // Token type
    try {
        this.state = 331;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 317;
            this.ifSingleLineStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 318;
            this.ifBlockStatement();
            this.state = 322;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 319;
                    this.ifElseIfBlockStatement(); 
                }
                this.state = 324;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
            }

            this.state = 326;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===BrightScriptParser.ELSE) {
                this.state = 325;
                this.ifElseBlockStatement();
            }

            this.state = 328;
            this.match(BrightScriptParser.END);
            this.state = 329;
            this.match(BrightScriptParser.IF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfSingleLineStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_ifSingleLineStatement;
    return this;
}

IfSingleLineStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfSingleLineStatementContext.prototype.constructor = IfSingleLineStatementContext;

IfSingleLineStatementContext.prototype.IF = function() {
    return this.getToken(BrightScriptParser.IF, 0);
};

IfSingleLineStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfSingleLineStatementContext.prototype.blockStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockStatementContext);
    } else {
        return this.getTypedRuleContext(BlockStatementContext,i);
    }
};

IfSingleLineStatementContext.prototype.THEN = function() {
    return this.getToken(BrightScriptParser.THEN, 0);
};

IfSingleLineStatementContext.prototype.ELSE = function() {
    return this.getToken(BrightScriptParser.ELSE, 0);
};

IfSingleLineStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterIfSingleLineStatement(this);
	}
};

IfSingleLineStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitIfSingleLineStatement(this);
	}
};

IfSingleLineStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitIfSingleLineStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.IfSingleLineStatementContext = IfSingleLineStatementContext;

BrightScriptParser.prototype.ifSingleLineStatement = function() {

    var localctx = new IfSingleLineStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, BrightScriptParser.RULE_ifSingleLineStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 333;
        this.match(BrightScriptParser.IF);
        this.state = 334;
        this.expression(0);
        this.state = 336;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        if(la_===1) {
            this.state = 335;
            this.match(BrightScriptParser.THEN);

        }
        this.state = 338;
        this.blockStatement();
        this.state = 341;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
        if(la_===1) {
            this.state = 339;
            this.match(BrightScriptParser.ELSE);
            this.state = 340;
            this.blockStatement();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfBlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_ifBlockStatement;
    return this;
}

IfBlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfBlockStatementContext.prototype.constructor = IfBlockStatementContext;

IfBlockStatementContext.prototype.IF = function() {
    return this.getToken(BrightScriptParser.IF, 0);
};

IfBlockStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfBlockStatementContext.prototype.THEN = function() {
    return this.getToken(BrightScriptParser.THEN, 0);
};

IfBlockStatementContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

IfBlockStatementContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

IfBlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterIfBlockStatement(this);
	}
};

IfBlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitIfBlockStatement(this);
	}
};

IfBlockStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitIfBlockStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.IfBlockStatementContext = IfBlockStatementContext;

BrightScriptParser.prototype.ifBlockStatement = function() {

    var localctx = new IfBlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, BrightScriptParser.RULE_ifBlockStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 343;
        this.match(BrightScriptParser.IF);
        this.state = 344;
        this.expression(0);
        this.state = 346;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.THEN) {
            this.state = 345;
            this.match(BrightScriptParser.THEN);
        }

        this.state = 349; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 348;
        		this.endOfLine();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 351; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,41, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 356;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,42,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 353;
                this.block(); 
            }
            this.state = 358;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,42,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfElseIfBlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_ifElseIfBlockStatement;
    return this;
}

IfElseIfBlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfElseIfBlockStatementContext.prototype.constructor = IfElseIfBlockStatementContext;

IfElseIfBlockStatementContext.prototype.ELSE = function() {
    return this.getToken(BrightScriptParser.ELSE, 0);
};

IfElseIfBlockStatementContext.prototype.IF = function() {
    return this.getToken(BrightScriptParser.IF, 0);
};

IfElseIfBlockStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfElseIfBlockStatementContext.prototype.THEN = function() {
    return this.getToken(BrightScriptParser.THEN, 0);
};

IfElseIfBlockStatementContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

IfElseIfBlockStatementContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

IfElseIfBlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterIfElseIfBlockStatement(this);
	}
};

IfElseIfBlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitIfElseIfBlockStatement(this);
	}
};

IfElseIfBlockStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitIfElseIfBlockStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.IfElseIfBlockStatementContext = IfElseIfBlockStatementContext;

BrightScriptParser.prototype.ifElseIfBlockStatement = function() {

    var localctx = new IfElseIfBlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, BrightScriptParser.RULE_ifElseIfBlockStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 359;
        this.match(BrightScriptParser.ELSE);
        this.state = 360;
        this.match(BrightScriptParser.IF);
        this.state = 361;
        this.expression(0);
        this.state = 363;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.THEN) {
            this.state = 362;
            this.match(BrightScriptParser.THEN);
        }

        this.state = 366; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 365;
        		this.endOfLine();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 368; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,44, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 373;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,45,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 370;
                this.block(); 
            }
            this.state = 375;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,45,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfElseBlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_ifElseBlockStatement;
    return this;
}

IfElseBlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfElseBlockStatementContext.prototype.constructor = IfElseBlockStatementContext;

IfElseBlockStatementContext.prototype.ELSE = function() {
    return this.getToken(BrightScriptParser.ELSE, 0);
};

IfElseBlockStatementContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

IfElseBlockStatementContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

IfElseBlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterIfElseBlockStatement(this);
	}
};

IfElseBlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitIfElseBlockStatement(this);
	}
};

IfElseBlockStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitIfElseBlockStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.IfElseBlockStatementContext = IfElseBlockStatementContext;

BrightScriptParser.prototype.ifElseBlockStatement = function() {

    var localctx = new IfElseBlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, BrightScriptParser.RULE_ifElseBlockStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 376;
        this.match(BrightScriptParser.ELSE);
        this.state = 378; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 377;
        		this.endOfLine();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 380; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,46, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 385;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,47,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 382;
                this.block(); 
            }
            this.state = 387;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,47,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LibraryStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_libraryStatement;
    return this;
}

LibraryStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LibraryStatementContext.prototype.constructor = LibraryStatementContext;

LibraryStatementContext.prototype.LIBRARY = function() {
    return this.getToken(BrightScriptParser.LIBRARY, 0);
};

LibraryStatementContext.prototype.STRING_LITERAL = function() {
    return this.getToken(BrightScriptParser.STRING_LITERAL, 0);
};

LibraryStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterLibraryStatement(this);
	}
};

LibraryStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitLibraryStatement(this);
	}
};

LibraryStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitLibraryStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.LibraryStatementContext = LibraryStatementContext;

BrightScriptParser.prototype.libraryStatement = function() {

    var localctx = new LibraryStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, BrightScriptParser.RULE_libraryStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 388;
        this.match(BrightScriptParser.LIBRARY);
        this.state = 389;
        this.match(BrightScriptParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NextStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_nextStatement;
    return this;
}

NextStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NextStatementContext.prototype.constructor = NextStatementContext;

NextStatementContext.prototype.NEXT = function() {
    return this.getToken(BrightScriptParser.NEXT, 0);
};

NextStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterNextStatement(this);
	}
};

NextStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitNextStatement(this);
	}
};

NextStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitNextStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.NextStatementContext = NextStatementContext;

BrightScriptParser.prototype.nextStatement = function() {

    var localctx = new NextStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, BrightScriptParser.RULE_nextStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 391;
        this.match(BrightScriptParser.NEXT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrintStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_printStatement;
    return this;
}

PrintStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrintStatementContext.prototype.constructor = PrintStatementContext;

PrintStatementContext.prototype.PRINT = function() {
    return this.getToken(BrightScriptParser.PRINT, 0);
};

PrintStatementContext.prototype.QUESTION_MARK = function() {
    return this.getToken(BrightScriptParser.QUESTION_MARK, 0);
};

PrintStatementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PrintStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterPrintStatement(this);
	}
};

PrintStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitPrintStatement(this);
	}
};

PrintStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitPrintStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.PrintStatementContext = PrintStatementContext;

BrightScriptParser.prototype.printStatement = function() {

    var localctx = new PrintStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, BrightScriptParser.RULE_printStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 393;
        _la = this._input.LA(1);
        if(!(_la===BrightScriptParser.PRINT || _la===BrightScriptParser.QUESTION_MARK)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 407;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
        if(la_===1) {
            this.state = 394;
            this.expression(0);
            this.state = 401;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,49,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 396;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===BrightScriptParser.T__7) {
                        this.state = 395;
                        this.match(BrightScriptParser.T__7);
                    }

                    this.state = 398;
                    this.expression(0); 
                }
                this.state = 403;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,49,this._ctx);
            }

            this.state = 405;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===BrightScriptParser.T__7) {
                this.state = 404;
                this.match(BrightScriptParser.T__7);
            }


        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(BrightScriptParser.RETURN, 0);
};

ReturnStatementContext.prototype.assignableExpression = function() {
    return this.getTypedRuleContext(AssignableExpressionContext,0);
};

ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitReturnStatement(this);
	}
};

ReturnStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitReturnStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ReturnStatementContext = ReturnStatementContext;

BrightScriptParser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, BrightScriptParser.RULE_returnStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 409;
        this.match(BrightScriptParser.RETURN);
        this.state = 411;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        if(la_===1) {
            this.state = 410;
            this.assignableExpression();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StopStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_stopStatement;
    return this;
}

StopStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StopStatementContext.prototype.constructor = StopStatementContext;

StopStatementContext.prototype.STOP = function() {
    return this.getToken(BrightScriptParser.STOP, 0);
};

StopStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterStopStatement(this);
	}
};

StopStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitStopStatement(this);
	}
};

StopStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitStopStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.StopStatementContext = StopStatementContext;

BrightScriptParser.prototype.stopStatement = function() {

    var localctx = new StopStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, BrightScriptParser.RULE_stopStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 413;
        this.match(BrightScriptParser.STOP);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhileStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_whileStatement;
    return this;
}

WhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

WhileStatementContext.prototype.WHILE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.WHILE);
    } else {
        return this.getToken(BrightScriptParser.WHILE, i);
    }
};


WhileStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhileStatementContext.prototype.END = function() {
    return this.getToken(BrightScriptParser.END, 0);
};

WhileStatementContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

WhileStatementContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

WhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterWhileStatement(this);
	}
};

WhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitWhileStatement(this);
	}
};

WhileStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitWhileStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.WhileStatementContext = WhileStatementContext;

BrightScriptParser.prototype.whileStatement = function() {

    var localctx = new WhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, BrightScriptParser.RULE_whileStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 415;
        this.match(BrightScriptParser.WHILE);
        this.state = 416;
        this.expression(0);
        this.state = 418; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 417;
        		this.endOfLine();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 420; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,53, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 425;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 422;
                this.block(); 
            }
            this.state = 427;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
        }

        this.state = 428;
        this.match(BrightScriptParser.END);
        this.state = 429;
        this.match(BrightScriptParser.WHILE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnonymousFunctionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_anonymousFunctionDeclaration;
    return this;
}

AnonymousFunctionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnonymousFunctionDeclarationContext.prototype.constructor = AnonymousFunctionDeclarationContext;

AnonymousFunctionDeclarationContext.prototype.FUNCTION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.FUNCTION);
    } else {
        return this.getToken(BrightScriptParser.FUNCTION, i);
    }
};


AnonymousFunctionDeclarationContext.prototype.END = function() {
    return this.getToken(BrightScriptParser.END, 0);
};

AnonymousFunctionDeclarationContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

AnonymousFunctionDeclarationContext.prototype.AS = function() {
    return this.getToken(BrightScriptParser.AS, 0);
};

AnonymousFunctionDeclarationContext.prototype.baseType = function() {
    return this.getTypedRuleContext(BaseTypeContext,0);
};

AnonymousFunctionDeclarationContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

AnonymousFunctionDeclarationContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

AnonymousFunctionDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterAnonymousFunctionDeclaration(this);
	}
};

AnonymousFunctionDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitAnonymousFunctionDeclaration(this);
	}
};

AnonymousFunctionDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitAnonymousFunctionDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.AnonymousFunctionDeclarationContext = AnonymousFunctionDeclarationContext;

BrightScriptParser.prototype.anonymousFunctionDeclaration = function() {

    var localctx = new AnonymousFunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, BrightScriptParser.RULE_anonymousFunctionDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 431;
        this.match(BrightScriptParser.FUNCTION);
        this.state = 433;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.T__8) {
            this.state = 432;
            this.parameterList();
        }

        this.state = 437;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.AS) {
            this.state = 435;
            this.match(BrightScriptParser.AS);
            this.state = 436;
            this.baseType();
        }

        this.state = 440; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 439;
        		this.endOfLine();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 442; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,57, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 447;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,58,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 444;
                this.block(); 
            }
            this.state = 449;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,58,this._ctx);
        }

        this.state = 450;
        this.match(BrightScriptParser.END);
        this.state = 451;
        this.match(BrightScriptParser.FUNCTION);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_functionDeclaration;
    return this;
}

FunctionDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDeclarationContext.prototype.constructor = FunctionDeclarationContext;

FunctionDeclarationContext.prototype.FUNCTION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.FUNCTION);
    } else {
        return this.getToken(BrightScriptParser.FUNCTION, i);
    }
};


FunctionDeclarationContext.prototype.untypedIdentifier = function() {
    return this.getTypedRuleContext(UntypedIdentifierContext,0);
};

FunctionDeclarationContext.prototype.END = function() {
    return this.getToken(BrightScriptParser.END, 0);
};

FunctionDeclarationContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

FunctionDeclarationContext.prototype.AS = function() {
    return this.getToken(BrightScriptParser.AS, 0);
};

FunctionDeclarationContext.prototype.baseType = function() {
    return this.getTypedRuleContext(BaseTypeContext,0);
};

FunctionDeclarationContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

FunctionDeclarationContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

FunctionDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterFunctionDeclaration(this);
	}
};

FunctionDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitFunctionDeclaration(this);
	}
};

FunctionDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitFunctionDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.FunctionDeclarationContext = FunctionDeclarationContext;

BrightScriptParser.prototype.functionDeclaration = function() {

    var localctx = new FunctionDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, BrightScriptParser.RULE_functionDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 453;
        this.match(BrightScriptParser.FUNCTION);
        this.state = 454;
        this.untypedIdentifier();
        this.state = 456;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.T__8) {
            this.state = 455;
            this.parameterList();
        }

        this.state = 460;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.AS) {
            this.state = 458;
            this.match(BrightScriptParser.AS);
            this.state = 459;
            this.baseType();
        }

        this.state = 463; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 462;
        		this.endOfLine();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 465; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,61, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 470;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 467;
                this.block(); 
            }
            this.state = 472;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
        }

        this.state = 473;
        this.match(BrightScriptParser.END);
        this.state = 474;
        this.match(BrightScriptParser.FUNCTION);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnonymousSubDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_anonymousSubDeclaration;
    return this;
}

AnonymousSubDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnonymousSubDeclarationContext.prototype.constructor = AnonymousSubDeclarationContext;

AnonymousSubDeclarationContext.prototype.SUB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.SUB);
    } else {
        return this.getToken(BrightScriptParser.SUB, i);
    }
};


AnonymousSubDeclarationContext.prototype.END = function() {
    return this.getToken(BrightScriptParser.END, 0);
};

AnonymousSubDeclarationContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

AnonymousSubDeclarationContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

AnonymousSubDeclarationContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

AnonymousSubDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterAnonymousSubDeclaration(this);
	}
};

AnonymousSubDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitAnonymousSubDeclaration(this);
	}
};

AnonymousSubDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitAnonymousSubDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.AnonymousSubDeclarationContext = AnonymousSubDeclarationContext;

BrightScriptParser.prototype.anonymousSubDeclaration = function() {

    var localctx = new AnonymousSubDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, BrightScriptParser.RULE_anonymousSubDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 476;
        this.match(BrightScriptParser.SUB);
        this.state = 478;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.T__8) {
            this.state = 477;
            this.parameterList();
        }

        this.state = 481; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 480;
        		this.endOfLine();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 483; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,64, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 488;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 485;
                this.block(); 
            }
            this.state = 490;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
        }

        this.state = 491;
        this.match(BrightScriptParser.END);
        this.state = 492;
        this.match(BrightScriptParser.SUB);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_subDeclaration;
    return this;
}

SubDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubDeclarationContext.prototype.constructor = SubDeclarationContext;

SubDeclarationContext.prototype.SUB = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.SUB);
    } else {
        return this.getToken(BrightScriptParser.SUB, i);
    }
};


SubDeclarationContext.prototype.untypedIdentifier = function() {
    return this.getTypedRuleContext(UntypedIdentifierContext,0);
};

SubDeclarationContext.prototype.END = function() {
    return this.getToken(BrightScriptParser.END, 0);
};

SubDeclarationContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

SubDeclarationContext.prototype.endOfLine = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EndOfLineContext);
    } else {
        return this.getTypedRuleContext(EndOfLineContext,i);
    }
};

SubDeclarationContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

SubDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterSubDeclaration(this);
	}
};

SubDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitSubDeclaration(this);
	}
};

SubDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitSubDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.SubDeclarationContext = SubDeclarationContext;

BrightScriptParser.prototype.subDeclaration = function() {

    var localctx = new SubDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, BrightScriptParser.RULE_subDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 494;
        this.match(BrightScriptParser.SUB);
        this.state = 495;
        this.untypedIdentifier();
        this.state = 497;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.T__8) {
            this.state = 496;
            this.parameterList();
        }

        this.state = 500; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 499;
        		this.endOfLine();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 502; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,67, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 507;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,68,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 504;
                this.block(); 
            }
            this.state = 509;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,68,this._ctx);
        }

        this.state = 510;
        this.match(BrightScriptParser.END);
        this.state = 511;
        this.match(BrightScriptParser.SUB);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_parameterList;
    return this;
}

ParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterListContext.prototype.constructor = ParameterListContext;

ParameterListContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

ParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterParameterList(this);
	}
};

ParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitParameterList(this);
	}
};

ParameterListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitParameterList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ParameterListContext = ParameterListContext;

BrightScriptParser.prototype.parameterList = function() {

    var localctx = new ParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, BrightScriptParser.RULE_parameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 513;
        this.match(BrightScriptParser.T__8);
        this.state = 522;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.FALSE || _la===BrightScriptParser.INVALID || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & ((1 << (BrightScriptParser.TRUE - 87)) | (1 << (BrightScriptParser.STRING_LITERAL - 87)) | (1 << (BrightScriptParser.NUMERIC_LITERAL - 87)) | (1 << (BrightScriptParser.IDENTIFIER - 87)))) !== 0)) {
            this.state = 514;
            this.parameter();
            this.state = 519;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===BrightScriptParser.T__1) {
                this.state = 515;
                this.match(BrightScriptParser.T__1);
                this.state = 516;
                this.parameter();
                this.state = 521;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 524;
        this.match(BrightScriptParser.T__9);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_parameter;
    return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

ParameterContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ParameterContext.prototype.assignableExpression = function() {
    return this.getTypedRuleContext(AssignableExpressionContext,0);
};

ParameterContext.prototype.AS = function() {
    return this.getToken(BrightScriptParser.AS, 0);
};

ParameterContext.prototype.baseType = function() {
    return this.getTypedRuleContext(BaseTypeContext,0);
};

ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitParameter(this);
	}
};

ParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ParameterContext = ParameterContext;

BrightScriptParser.prototype.parameter = function() {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, BrightScriptParser.RULE_parameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 528;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.FALSE:
        case BrightScriptParser.INVALID:
        case BrightScriptParser.TRUE:
        case BrightScriptParser.STRING_LITERAL:
        case BrightScriptParser.NUMERIC_LITERAL:
            this.state = 526;
            this.literal();
            break;
        case BrightScriptParser.IDENTIFIER:
            this.state = 527;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 532;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.T__6) {
            this.state = 530;
            this.match(BrightScriptParser.T__6);
            this.state = 531;
            this.assignableExpression();
        }

        this.state = 536;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===BrightScriptParser.AS) {
            this.state = 534;
            this.match(BrightScriptParser.AS);
            this.state = 535;
            this.baseType();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BaseTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_baseType;
    return this;
}

BaseTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseTypeContext.prototype.constructor = BaseTypeContext;

BaseTypeContext.prototype.BOOLEAN = function() {
    return this.getToken(BrightScriptParser.BOOLEAN, 0);
};

BaseTypeContext.prototype.DOUBLE = function() {
    return this.getToken(BrightScriptParser.DOUBLE, 0);
};

BaseTypeContext.prototype.DYNAMIC = function() {
    return this.getToken(BrightScriptParser.DYNAMIC, 0);
};

BaseTypeContext.prototype.FLOAT = function() {
    return this.getToken(BrightScriptParser.FLOAT, 0);
};

BaseTypeContext.prototype.FUNCTION = function() {
    return this.getToken(BrightScriptParser.FUNCTION, 0);
};

BaseTypeContext.prototype.INTEGER = function() {
    return this.getToken(BrightScriptParser.INTEGER, 0);
};

BaseTypeContext.prototype.OBJECT = function() {
    return this.getToken(BrightScriptParser.OBJECT, 0);
};

BaseTypeContext.prototype.STRING = function() {
    return this.getToken(BrightScriptParser.STRING, 0);
};

BaseTypeContext.prototype.VOID = function() {
    return this.getToken(BrightScriptParser.VOID, 0);
};

BaseTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterBaseType(this);
	}
};

BaseTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitBaseType(this);
	}
};

BaseTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitBaseType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.BaseTypeContext = BaseTypeContext;

BrightScriptParser.prototype.baseType = function() {

    var localctx = new BaseTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, BrightScriptParser.RULE_baseType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 538;
        _la = this._input.LA(1);
        if(!(((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (BrightScriptParser.BOOLEAN - 36)) | (1 << (BrightScriptParser.DOUBLE - 36)) | (1 << (BrightScriptParser.DYNAMIC - 36)) | (1 << (BrightScriptParser.FLOAT - 36)) | (1 << (BrightScriptParser.FUNCTION - 36)) | (1 << (BrightScriptParser.INTEGER - 36)))) !== 0) || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (BrightScriptParser.OBJECT - 72)) | (1 << (BrightScriptParser.STRING - 72)) | (1 << (BrightScriptParser.VOID - 72)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.associativeArrayInitializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssociativeArrayInitializerContext);
    } else {
        return this.getTypedRuleContext(AssociativeArrayInitializerContext,i);
    }
};

ExpressionListContext.prototype.arrayInitializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrayInitializerContext);
    } else {
        return this.getTypedRuleContext(ArrayInitializerContext,i);
    }
};

ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitExpressionList(this);
	}
};

ExpressionListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitExpressionList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ExpressionListContext = ExpressionListContext;

BrightScriptParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, BrightScriptParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 543;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.T__8:
        case BrightScriptParser.T__11:
        case BrightScriptParser.T__12:
        case BrightScriptParser.AND:
        case BrightScriptParser.BOX:
        case BrightScriptParser.CREATEOBJECT:
        case BrightScriptParser.DIM:
        case BrightScriptParser.EACH:
        case BrightScriptParser.ELSE:
        case BrightScriptParser.ELSEIF:
        case BrightScriptParser.END:
        case BrightScriptParser.ENDFUNCTION:
        case BrightScriptParser.ENDIF:
        case BrightScriptParser.ENDSUB:
        case BrightScriptParser.ENDWHILE:
        case BrightScriptParser.EXIT:
        case BrightScriptParser.EXITWHILE:
        case BrightScriptParser.EVAL:
        case BrightScriptParser.FALSE:
        case BrightScriptParser.FOR:
        case BrightScriptParser.FUNCTION:
        case BrightScriptParser.GETGLOBALAA:
        case BrightScriptParser.GETLASTRUNCOMPILEERROR:
        case BrightScriptParser.GETLASTRUNRUNTIMEERROR:
        case BrightScriptParser.GOTO:
        case BrightScriptParser.IF:
        case BrightScriptParser.INVALID:
        case BrightScriptParser.LET:
        case BrightScriptParser.LINE_NUM:
        case BrightScriptParser.NEXT:
        case BrightScriptParser.NOT:
        case BrightScriptParser.OBJFUN:
        case BrightScriptParser.OR:
        case BrightScriptParser.POS:
        case BrightScriptParser.PRINT:
        case BrightScriptParser.REM:
        case BrightScriptParser.RETURN:
        case BrightScriptParser.RUN:
        case BrightScriptParser.STEP:
        case BrightScriptParser.STOP:
        case BrightScriptParser.STRING:
        case BrightScriptParser.SUB:
        case BrightScriptParser.TAB:
        case BrightScriptParser.THEN:
        case BrightScriptParser.TO:
        case BrightScriptParser.TRUE:
        case BrightScriptParser.TYPE:
        case BrightScriptParser.WHILE:
        case BrightScriptParser.STRING_LITERAL:
        case BrightScriptParser.NUMERIC_LITERAL:
        case BrightScriptParser.IDENTIFIER:
            this.state = 540;
            this.expression(0);
            break;
        case BrightScriptParser.T__3:
            this.state = 541;
            this.associativeArrayInitializer();
            break;
        case BrightScriptParser.T__0:
            this.state = 542;
            this.arrayInitializer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 553;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===BrightScriptParser.T__1) {
            this.state = 545;
            this.match(BrightScriptParser.T__1);
            this.state = 549;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case BrightScriptParser.T__8:
            case BrightScriptParser.T__11:
            case BrightScriptParser.T__12:
            case BrightScriptParser.AND:
            case BrightScriptParser.BOX:
            case BrightScriptParser.CREATEOBJECT:
            case BrightScriptParser.DIM:
            case BrightScriptParser.EACH:
            case BrightScriptParser.ELSE:
            case BrightScriptParser.ELSEIF:
            case BrightScriptParser.END:
            case BrightScriptParser.ENDFUNCTION:
            case BrightScriptParser.ENDIF:
            case BrightScriptParser.ENDSUB:
            case BrightScriptParser.ENDWHILE:
            case BrightScriptParser.EXIT:
            case BrightScriptParser.EXITWHILE:
            case BrightScriptParser.EVAL:
            case BrightScriptParser.FALSE:
            case BrightScriptParser.FOR:
            case BrightScriptParser.FUNCTION:
            case BrightScriptParser.GETGLOBALAA:
            case BrightScriptParser.GETLASTRUNCOMPILEERROR:
            case BrightScriptParser.GETLASTRUNRUNTIMEERROR:
            case BrightScriptParser.GOTO:
            case BrightScriptParser.IF:
            case BrightScriptParser.INVALID:
            case BrightScriptParser.LET:
            case BrightScriptParser.LINE_NUM:
            case BrightScriptParser.NEXT:
            case BrightScriptParser.NOT:
            case BrightScriptParser.OBJFUN:
            case BrightScriptParser.OR:
            case BrightScriptParser.POS:
            case BrightScriptParser.PRINT:
            case BrightScriptParser.REM:
            case BrightScriptParser.RETURN:
            case BrightScriptParser.RUN:
            case BrightScriptParser.STEP:
            case BrightScriptParser.STOP:
            case BrightScriptParser.STRING:
            case BrightScriptParser.SUB:
            case BrightScriptParser.TAB:
            case BrightScriptParser.THEN:
            case BrightScriptParser.TO:
            case BrightScriptParser.TRUE:
            case BrightScriptParser.TYPE:
            case BrightScriptParser.WHILE:
            case BrightScriptParser.STRING_LITERAL:
            case BrightScriptParser.NUMERIC_LITERAL:
            case BrightScriptParser.IDENTIFIER:
                this.state = 546;
                this.expression(0);
                break;
            case BrightScriptParser.T__3:
                this.state = 547;
                this.associativeArrayInitializer();
                break;
            case BrightScriptParser.T__0:
                this.state = 548;
                this.arrayInitializer();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 555;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GlobalFunctionInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_globalFunctionInvocation;
    return this;
}

GlobalFunctionInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GlobalFunctionInvocationContext.prototype.constructor = GlobalFunctionInvocationContext;

GlobalFunctionInvocationContext.prototype.globalFunction = function() {
    return this.getTypedRuleContext(GlobalFunctionContext,0);
};

GlobalFunctionInvocationContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

GlobalFunctionInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterGlobalFunctionInvocation(this);
	}
};

GlobalFunctionInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitGlobalFunctionInvocation(this);
	}
};

GlobalFunctionInvocationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitGlobalFunctionInvocation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.GlobalFunctionInvocationContext = GlobalFunctionInvocationContext;

BrightScriptParser.prototype.globalFunctionInvocation = function() {

    var localctx = new GlobalFunctionInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, BrightScriptParser.RULE_globalFunctionInvocation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 556;
        this.globalFunction();
        this.state = 557;
        this.match(BrightScriptParser.T__8);
        this.state = 558;
        this.expressionList();
        this.state = 559;
        this.match(BrightScriptParser.T__9);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GlobalFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_globalFunction;
    return this;
}

GlobalFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GlobalFunctionContext.prototype.constructor = GlobalFunctionContext;

GlobalFunctionContext.prototype.CREATEOBJECT = function() {
    return this.getToken(BrightScriptParser.CREATEOBJECT, 0);
};

GlobalFunctionContext.prototype.GETLASTRUNCOMPILEERROR = function() {
    return this.getToken(BrightScriptParser.GETLASTRUNCOMPILEERROR, 0);
};

GlobalFunctionContext.prototype.GETGLOBALAA = function() {
    return this.getToken(BrightScriptParser.GETGLOBALAA, 0);
};

GlobalFunctionContext.prototype.GETLASTRUNRUNTIMEERROR = function() {
    return this.getToken(BrightScriptParser.GETLASTRUNRUNTIMEERROR, 0);
};

GlobalFunctionContext.prototype.STRING = function() {
    return this.getToken(BrightScriptParser.STRING, 0);
};

GlobalFunctionContext.prototype.TAB = function() {
    return this.getToken(BrightScriptParser.TAB, 0);
};

GlobalFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterGlobalFunction(this);
	}
};

GlobalFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitGlobalFunction(this);
	}
};

GlobalFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitGlobalFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.GlobalFunctionContext = GlobalFunctionContext;

BrightScriptParser.prototype.globalFunction = function() {

    var localctx = new GlobalFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, BrightScriptParser.RULE_globalFunction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 561;
        _la = this._input.LA(1);
        if(!(((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (BrightScriptParser.CREATEOBJECT - 38)) | (1 << (BrightScriptParser.GETGLOBALAA - 38)) | (1 << (BrightScriptParser.GETLASTRUNCOMPILEERROR - 38)) | (1 << (BrightScriptParser.GETLASTRUNRUNTIMEERROR - 38)))) !== 0) || _la===BrightScriptParser.STRING || _la===BrightScriptParser.TAB)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.primary = function() {
    return this.getTypedRuleContext(PrimaryContext,0);
};

ExpressionContext.prototype.globalFunctionInvocation = function() {
    return this.getTypedRuleContext(GlobalFunctionInvocationContext,0);
};

ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionContext.prototype.NOT = function() {
    return this.getToken(BrightScriptParser.NOT, 0);
};

ExpressionContext.prototype.MOD = function() {
    return this.getToken(BrightScriptParser.MOD, 0);
};

ExpressionContext.prototype.AND = function() {
    return this.getToken(BrightScriptParser.AND, 0);
};

ExpressionContext.prototype.OR = function() {
    return this.getToken(BrightScriptParser.OR, 0);
};

ExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ExpressionContext.prototype.reservedWord = function() {
    return this.getTypedRuleContext(ReservedWordContext,0);
};

ExpressionContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ExpressionContext.prototype.assignableExpression = function() {
    return this.getTypedRuleContext(AssignableExpressionContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitExpression(this);
	}
};

ExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



BrightScriptParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 68;
    this.enterRecursionRule(localctx, 68, BrightScriptParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 570;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
        switch(la_) {
        case 1:
            this.state = 564;
            this.primary();
            break;

        case 2:
            this.state = 565;
            this.globalFunctionInvocation();
            break;

        case 3:
            this.state = 566;
            _la = this._input.LA(1);
            if(!(_la===BrightScriptParser.T__11 || _la===BrightScriptParser.T__12)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 567;
            this.expression(9);
            break;

        case 4:
            this.state = 568;
            this.match(BrightScriptParser.NOT);
            this.state = 569;
            this.expression(3);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 611;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 609;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, BrightScriptParser.RULE_expression);
                    this.state = 572;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 573;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BrightScriptParser.T__15) | (1 << BrightScriptParser.T__16) | (1 << BrightScriptParser.T__17))) !== 0) || _la===BrightScriptParser.MOD)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 574;
                    this.expression(8);
                    break;

                case 2:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, BrightScriptParser.RULE_expression);
                    this.state = 575;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 576;
                    _la = this._input.LA(1);
                    if(!(_la===BrightScriptParser.T__11 || _la===BrightScriptParser.T__12)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 577;
                    this.expression(7);
                    break;

                case 3:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, BrightScriptParser.RULE_expression);
                    this.state = 578;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 579;
                    _la = this._input.LA(1);
                    if(!(_la===BrightScriptParser.T__18 || _la===BrightScriptParser.T__19)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 580;
                    this.expression(6);
                    break;

                case 4:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, BrightScriptParser.RULE_expression);
                    this.state = 581;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 582;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BrightScriptParser.T__6) | (1 << BrightScriptParser.T__20) | (1 << BrightScriptParser.T__21) | (1 << BrightScriptParser.T__22) | (1 << BrightScriptParser.T__23) | (1 << BrightScriptParser.T__24))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 583;
                    this.expression(5);
                    break;

                case 5:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, BrightScriptParser.RULE_expression);
                    this.state = 584;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 585;
                    _la = this._input.LA(1);
                    if(!(_la===BrightScriptParser.AND || _la===BrightScriptParser.OR)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 586;
                    this.expression(3);
                    break;

                case 6:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, BrightScriptParser.RULE_expression);
                    this.state = 587;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 588;
                    this.match(BrightScriptParser.T__10);
                    this.state = 591;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case BrightScriptParser.IDENTIFIER:
                        this.state = 589;
                        this.identifier();
                        break;
                    case BrightScriptParser.AND:
                    case BrightScriptParser.BOX:
                    case BrightScriptParser.CREATEOBJECT:
                    case BrightScriptParser.DIM:
                    case BrightScriptParser.EACH:
                    case BrightScriptParser.ELSE:
                    case BrightScriptParser.ELSEIF:
                    case BrightScriptParser.END:
                    case BrightScriptParser.ENDFUNCTION:
                    case BrightScriptParser.ENDIF:
                    case BrightScriptParser.ENDSUB:
                    case BrightScriptParser.ENDWHILE:
                    case BrightScriptParser.EXIT:
                    case BrightScriptParser.EXITWHILE:
                    case BrightScriptParser.EVAL:
                    case BrightScriptParser.FALSE:
                    case BrightScriptParser.FOR:
                    case BrightScriptParser.FUNCTION:
                    case BrightScriptParser.GETGLOBALAA:
                    case BrightScriptParser.GETLASTRUNCOMPILEERROR:
                    case BrightScriptParser.GETLASTRUNRUNTIMEERROR:
                    case BrightScriptParser.GOTO:
                    case BrightScriptParser.IF:
                    case BrightScriptParser.INVALID:
                    case BrightScriptParser.LET:
                    case BrightScriptParser.LINE_NUM:
                    case BrightScriptParser.NEXT:
                    case BrightScriptParser.NOT:
                    case BrightScriptParser.OBJFUN:
                    case BrightScriptParser.OR:
                    case BrightScriptParser.POS:
                    case BrightScriptParser.PRINT:
                    case BrightScriptParser.REM:
                    case BrightScriptParser.RETURN:
                    case BrightScriptParser.RUN:
                    case BrightScriptParser.STEP:
                    case BrightScriptParser.STOP:
                    case BrightScriptParser.SUB:
                    case BrightScriptParser.TAB:
                    case BrightScriptParser.THEN:
                    case BrightScriptParser.TO:
                    case BrightScriptParser.TRUE:
                    case BrightScriptParser.TYPE:
                    case BrightScriptParser.WHILE:
                        this.state = 590;
                        this.reservedWord();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;

                case 7:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, BrightScriptParser.RULE_expression);
                    this.state = 593;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 594;
                    this.match(BrightScriptParser.T__0);
                    this.state = 595;
                    this.expression(0);
                    this.state = 596;
                    this.match(BrightScriptParser.T__2);
                    break;

                case 8:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, BrightScriptParser.RULE_expression);
                    this.state = 598;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 599;
                    this.match(BrightScriptParser.T__8);
                    this.state = 601;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BrightScriptParser.T__0) | (1 << BrightScriptParser.T__3) | (1 << BrightScriptParser.T__8) | (1 << BrightScriptParser.T__11) | (1 << BrightScriptParser.T__12))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (BrightScriptParser.AND - 34)) | (1 << (BrightScriptParser.BOX - 34)) | (1 << (BrightScriptParser.CREATEOBJECT - 34)) | (1 << (BrightScriptParser.DIM - 34)) | (1 << (BrightScriptParser.EACH - 34)) | (1 << (BrightScriptParser.ELSE - 34)) | (1 << (BrightScriptParser.ELSEIF - 34)) | (1 << (BrightScriptParser.END - 34)) | (1 << (BrightScriptParser.ENDFUNCTION - 34)) | (1 << (BrightScriptParser.ENDIF - 34)) | (1 << (BrightScriptParser.ENDSUB - 34)) | (1 << (BrightScriptParser.ENDWHILE - 34)) | (1 << (BrightScriptParser.EXIT - 34)) | (1 << (BrightScriptParser.EXITWHILE - 34)) | (1 << (BrightScriptParser.EVAL - 34)) | (1 << (BrightScriptParser.FALSE - 34)) | (1 << (BrightScriptParser.FOR - 34)) | (1 << (BrightScriptParser.FUNCTION - 34)) | (1 << (BrightScriptParser.GETGLOBALAA - 34)) | (1 << (BrightScriptParser.GETLASTRUNCOMPILEERROR - 34)) | (1 << (BrightScriptParser.GETLASTRUNRUNTIMEERROR - 34)) | (1 << (BrightScriptParser.GOTO - 34)) | (1 << (BrightScriptParser.IF - 34)) | (1 << (BrightScriptParser.INVALID - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (BrightScriptParser.LET - 66)) | (1 << (BrightScriptParser.LINE_NUM - 66)) | (1 << (BrightScriptParser.NEXT - 66)) | (1 << (BrightScriptParser.NOT - 66)) | (1 << (BrightScriptParser.OBJFUN - 66)) | (1 << (BrightScriptParser.OR - 66)) | (1 << (BrightScriptParser.POS - 66)) | (1 << (BrightScriptParser.PRINT - 66)) | (1 << (BrightScriptParser.REM - 66)) | (1 << (BrightScriptParser.RETURN - 66)) | (1 << (BrightScriptParser.RUN - 66)) | (1 << (BrightScriptParser.STEP - 66)) | (1 << (BrightScriptParser.STOP - 66)) | (1 << (BrightScriptParser.STRING - 66)) | (1 << (BrightScriptParser.SUB - 66)) | (1 << (BrightScriptParser.TAB - 66)) | (1 << (BrightScriptParser.THEN - 66)) | (1 << (BrightScriptParser.TO - 66)) | (1 << (BrightScriptParser.TRUE - 66)) | (1 << (BrightScriptParser.TYPE - 66)) | (1 << (BrightScriptParser.WHILE - 66)) | (1 << (BrightScriptParser.STRING_LITERAL - 66)) | (1 << (BrightScriptParser.NUMERIC_LITERAL - 66)) | (1 << (BrightScriptParser.IDENTIFIER - 66)))) !== 0)) {
                        this.state = 600;
                        this.expressionList();
                    }

                    this.state = 603;
                    this.match(BrightScriptParser.T__9);
                    break;

                case 9:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, BrightScriptParser.RULE_expression);
                    this.state = 604;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 605;
                    _la = this._input.LA(1);
                    if(!(_la===BrightScriptParser.T__13 || _la===BrightScriptParser.T__14)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                case 10:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, BrightScriptParser.RULE_expression);
                    this.state = 606;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 607;
                    _la = this._input.LA(1);
                    if(!(((((_la - 7)) & ~0x1f) == 0 && ((1 << (_la - 7)) & ((1 << (BrightScriptParser.T__6 - 7)) | (1 << (BrightScriptParser.T__25 - 7)) | (1 << (BrightScriptParser.T__26 - 7)) | (1 << (BrightScriptParser.T__27 - 7)) | (1 << (BrightScriptParser.T__28 - 7)) | (1 << (BrightScriptParser.T__29 - 7)) | (1 << (BrightScriptParser.T__30 - 7)) | (1 << (BrightScriptParser.T__31 - 7)) | (1 << (BrightScriptParser.T__32 - 7)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 608;
                    this.assignableExpression();
                    break;

                } 
            }
            this.state = 613;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function PrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_primary;
    return this;
}

PrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryContext.prototype.constructor = PrimaryContext;

PrimaryContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PrimaryContext.prototype.reservedWord = function() {
    return this.getTypedRuleContext(ReservedWordContext,0);
};

PrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterPrimary(this);
	}
};

PrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitPrimary(this);
	}
};

PrimaryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitPrimary(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.PrimaryContext = PrimaryContext;

BrightScriptParser.prototype.primary = function() {

    var localctx = new PrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, BrightScriptParser.RULE_primary);
    try {
        this.state = 625;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 614;
            this.match(BrightScriptParser.T__8);
            this.state = 615;
            this.expression(0);
            this.state = 616;
            this.match(BrightScriptParser.T__9);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 618;
            this.literal();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 619;
            this.identifier();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 620;
            this.reservedWord();
            this.state = 621;
            this.match(BrightScriptParser.T__8);
            this.state = 622;
            this.expression(0);
            this.state = 623;
            this.match(BrightScriptParser.T__9);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.numericLiteral = function() {
    return this.getTypedRuleContext(NumericLiteralContext,0);
};

LiteralContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

LiteralContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

LiteralContext.prototype.invalidLiteral = function() {
    return this.getTypedRuleContext(InvalidLiteralContext,0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitLiteral(this);
	}
};

LiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.LiteralContext = LiteralContext;

BrightScriptParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, BrightScriptParser.RULE_literal);
    try {
        this.state = 631;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.NUMERIC_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 627;
            this.numericLiteral();
            break;
        case BrightScriptParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 628;
            this.stringLiteral();
            break;
        case BrightScriptParser.FALSE:
        case BrightScriptParser.TRUE:
            this.enterOuterAlt(localctx, 3);
            this.state = 629;
            this.booleanLiteral();
            break;
        case BrightScriptParser.INVALID:
            this.enterOuterAlt(localctx, 4);
            this.state = 630;
            this.invalidLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignableExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_assignableExpression;
    return this;
}

AssignableExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignableExpressionContext.prototype.constructor = AssignableExpressionContext;

AssignableExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

AssignableExpressionContext.prototype.arrayInitializer = function() {
    return this.getTypedRuleContext(ArrayInitializerContext,0);
};

AssignableExpressionContext.prototype.associativeArrayInitializer = function() {
    return this.getTypedRuleContext(AssociativeArrayInitializerContext,0);
};

AssignableExpressionContext.prototype.anonymousFunctionDeclaration = function() {
    return this.getTypedRuleContext(AnonymousFunctionDeclarationContext,0);
};

AssignableExpressionContext.prototype.anonymousSubDeclaration = function() {
    return this.getTypedRuleContext(AnonymousSubDeclarationContext,0);
};

AssignableExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterAssignableExpression(this);
	}
};

AssignableExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitAssignableExpression(this);
	}
};

AssignableExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitAssignableExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.AssignableExpressionContext = AssignableExpressionContext;

BrightScriptParser.prototype.assignableExpression = function() {

    var localctx = new AssignableExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, BrightScriptParser.RULE_assignableExpression);
    try {
        this.state = 638;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 633;
            this.expression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 634;
            this.arrayInitializer();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 635;
            this.associativeArrayInitializer();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 636;
            this.anonymousFunctionDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 637;
            this.anonymousSubDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_numericLiteral;
    return this;
}

NumericLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericLiteralContext.prototype.constructor = NumericLiteralContext;

NumericLiteralContext.prototype.NUMERIC_LITERAL = function() {
    return this.getToken(BrightScriptParser.NUMERIC_LITERAL, 0);
};

NumericLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterNumericLiteral(this);
	}
};

NumericLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitNumericLiteral(this);
	}
};

NumericLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitNumericLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.NumericLiteralContext = NumericLiteralContext;

BrightScriptParser.prototype.numericLiteral = function() {

    var localctx = new NumericLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, BrightScriptParser.RULE_numericLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 640;
        this.match(BrightScriptParser.NUMERIC_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_stringLiteral;
    return this;
}

StringLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

StringLiteralContext.prototype.STRING_LITERAL = function() {
    return this.getToken(BrightScriptParser.STRING_LITERAL, 0);
};

StringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterStringLiteral(this);
	}
};

StringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitStringLiteral(this);
	}
};

StringLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitStringLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.StringLiteralContext = StringLiteralContext;

BrightScriptParser.prototype.stringLiteral = function() {

    var localctx = new StringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, BrightScriptParser.RULE_stringLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 642;
        this.match(BrightScriptParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_booleanLiteral;
    return this;
}

BooleanLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

BooleanLiteralContext.prototype.TRUE = function() {
    return this.getToken(BrightScriptParser.TRUE, 0);
};

BooleanLiteralContext.prototype.FALSE = function() {
    return this.getToken(BrightScriptParser.FALSE, 0);
};

BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitBooleanLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.BooleanLiteralContext = BooleanLiteralContext;

BrightScriptParser.prototype.booleanLiteral = function() {

    var localctx = new BooleanLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, BrightScriptParser.RULE_booleanLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 644;
        _la = this._input.LA(1);
        if(!(_la===BrightScriptParser.FALSE || _la===BrightScriptParser.TRUE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InvalidLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_invalidLiteral;
    return this;
}

InvalidLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InvalidLiteralContext.prototype.constructor = InvalidLiteralContext;

InvalidLiteralContext.prototype.INVALID = function() {
    return this.getToken(BrightScriptParser.INVALID, 0);
};

InvalidLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterInvalidLiteral(this);
	}
};

InvalidLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitInvalidLiteral(this);
	}
};

InvalidLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitInvalidLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.InvalidLiteralContext = InvalidLiteralContext;

BrightScriptParser.prototype.invalidLiteral = function() {

    var localctx = new InvalidLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, BrightScriptParser.RULE_invalidLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 646;
        this.match(BrightScriptParser.INVALID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.IDENTIFIER = function() {
    return this.getToken(BrightScriptParser.IDENTIFIER, 0);
};

IdentifierContext.prototype.IDENTIFIER_TYPE_DECLARATION = function() {
    return this.getToken(BrightScriptParser.IDENTIFIER_TYPE_DECLARATION, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitIdentifier(this);
	}
};

IdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.IdentifierContext = IdentifierContext;

BrightScriptParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, BrightScriptParser.RULE_identifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 648;
        this.match(BrightScriptParser.IDENTIFIER);
        this.state = 650;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        if(la_===1) {
            this.state = 649;
            this.match(BrightScriptParser.IDENTIFIER_TYPE_DECLARATION);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UntypedIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_untypedIdentifier;
    return this;
}

UntypedIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UntypedIdentifierContext.prototype.constructor = UntypedIdentifierContext;

UntypedIdentifierContext.prototype.IDENTIFIER = function() {
    return this.getToken(BrightScriptParser.IDENTIFIER, 0);
};

UntypedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterUntypedIdentifier(this);
	}
};

UntypedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitUntypedIdentifier(this);
	}
};

UntypedIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitUntypedIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.UntypedIdentifierContext = UntypedIdentifierContext;

BrightScriptParser.prototype.untypedIdentifier = function() {

    var localctx = new UntypedIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, BrightScriptParser.RULE_untypedIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 652;
        this.match(BrightScriptParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReservedWordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_reservedWord;
    return this;
}

ReservedWordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReservedWordContext.prototype.constructor = ReservedWordContext;

ReservedWordContext.prototype.AND = function() {
    return this.getToken(BrightScriptParser.AND, 0);
};

ReservedWordContext.prototype.BOX = function() {
    return this.getToken(BrightScriptParser.BOX, 0);
};

ReservedWordContext.prototype.CREATEOBJECT = function() {
    return this.getToken(BrightScriptParser.CREATEOBJECT, 0);
};

ReservedWordContext.prototype.DIM = function() {
    return this.getToken(BrightScriptParser.DIM, 0);
};

ReservedWordContext.prototype.EACH = function() {
    return this.getToken(BrightScriptParser.EACH, 0);
};

ReservedWordContext.prototype.ELSE = function() {
    return this.getToken(BrightScriptParser.ELSE, 0);
};

ReservedWordContext.prototype.ELSEIF = function() {
    return this.getToken(BrightScriptParser.ELSEIF, 0);
};

ReservedWordContext.prototype.END = function() {
    return this.getToken(BrightScriptParser.END, 0);
};

ReservedWordContext.prototype.ENDFUNCTION = function() {
    return this.getToken(BrightScriptParser.ENDFUNCTION, 0);
};

ReservedWordContext.prototype.ENDIF = function() {
    return this.getToken(BrightScriptParser.ENDIF, 0);
};

ReservedWordContext.prototype.ENDSUB = function() {
    return this.getToken(BrightScriptParser.ENDSUB, 0);
};

ReservedWordContext.prototype.ENDWHILE = function() {
    return this.getToken(BrightScriptParser.ENDWHILE, 0);
};

ReservedWordContext.prototype.EVAL = function() {
    return this.getToken(BrightScriptParser.EVAL, 0);
};

ReservedWordContext.prototype.EXIT = function() {
    return this.getToken(BrightScriptParser.EXIT, 0);
};

ReservedWordContext.prototype.EXITWHILE = function() {
    return this.getToken(BrightScriptParser.EXITWHILE, 0);
};

ReservedWordContext.prototype.FALSE = function() {
    return this.getToken(BrightScriptParser.FALSE, 0);
};

ReservedWordContext.prototype.FOR = function() {
    return this.getToken(BrightScriptParser.FOR, 0);
};

ReservedWordContext.prototype.FUNCTION = function() {
    return this.getToken(BrightScriptParser.FUNCTION, 0);
};

ReservedWordContext.prototype.GETGLOBALAA = function() {
    return this.getToken(BrightScriptParser.GETGLOBALAA, 0);
};

ReservedWordContext.prototype.GETLASTRUNCOMPILEERROR = function() {
    return this.getToken(BrightScriptParser.GETLASTRUNCOMPILEERROR, 0);
};

ReservedWordContext.prototype.GETLASTRUNRUNTIMEERROR = function() {
    return this.getToken(BrightScriptParser.GETLASTRUNRUNTIMEERROR, 0);
};

ReservedWordContext.prototype.GOTO = function() {
    return this.getToken(BrightScriptParser.GOTO, 0);
};

ReservedWordContext.prototype.IF = function() {
    return this.getToken(BrightScriptParser.IF, 0);
};

ReservedWordContext.prototype.INVALID = function() {
    return this.getToken(BrightScriptParser.INVALID, 0);
};

ReservedWordContext.prototype.LET = function() {
    return this.getToken(BrightScriptParser.LET, 0);
};

ReservedWordContext.prototype.LINE_NUM = function() {
    return this.getToken(BrightScriptParser.LINE_NUM, 0);
};

ReservedWordContext.prototype.NEXT = function() {
    return this.getToken(BrightScriptParser.NEXT, 0);
};

ReservedWordContext.prototype.NOT = function() {
    return this.getToken(BrightScriptParser.NOT, 0);
};

ReservedWordContext.prototype.OBJFUN = function() {
    return this.getToken(BrightScriptParser.OBJFUN, 0);
};

ReservedWordContext.prototype.OR = function() {
    return this.getToken(BrightScriptParser.OR, 0);
};

ReservedWordContext.prototype.POS = function() {
    return this.getToken(BrightScriptParser.POS, 0);
};

ReservedWordContext.prototype.PRINT = function() {
    return this.getToken(BrightScriptParser.PRINT, 0);
};

ReservedWordContext.prototype.REM = function() {
    return this.getToken(BrightScriptParser.REM, 0);
};

ReservedWordContext.prototype.RETURN = function() {
    return this.getToken(BrightScriptParser.RETURN, 0);
};

ReservedWordContext.prototype.RUN = function() {
    return this.getToken(BrightScriptParser.RUN, 0);
};

ReservedWordContext.prototype.STEP = function() {
    return this.getToken(BrightScriptParser.STEP, 0);
};

ReservedWordContext.prototype.STOP = function() {
    return this.getToken(BrightScriptParser.STOP, 0);
};

ReservedWordContext.prototype.SUB = function() {
    return this.getToken(BrightScriptParser.SUB, 0);
};

ReservedWordContext.prototype.TAB = function() {
    return this.getToken(BrightScriptParser.TAB, 0);
};

ReservedWordContext.prototype.THEN = function() {
    return this.getToken(BrightScriptParser.THEN, 0);
};

ReservedWordContext.prototype.TO = function() {
    return this.getToken(BrightScriptParser.TO, 0);
};

ReservedWordContext.prototype.TRUE = function() {
    return this.getToken(BrightScriptParser.TRUE, 0);
};

ReservedWordContext.prototype.TYPE = function() {
    return this.getToken(BrightScriptParser.TYPE, 0);
};

ReservedWordContext.prototype.WHILE = function() {
    return this.getToken(BrightScriptParser.WHILE, 0);
};

ReservedWordContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterReservedWord(this);
	}
};

ReservedWordContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitReservedWord(this);
	}
};

ReservedWordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitReservedWord(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.ReservedWordContext = ReservedWordContext;

BrightScriptParser.prototype.reservedWord = function() {

    var localctx = new ReservedWordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, BrightScriptParser.RULE_reservedWord);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 654;
        _la = this._input.LA(1);
        if(!(((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (BrightScriptParser.AND - 34)) | (1 << (BrightScriptParser.BOX - 34)) | (1 << (BrightScriptParser.CREATEOBJECT - 34)) | (1 << (BrightScriptParser.DIM - 34)) | (1 << (BrightScriptParser.EACH - 34)) | (1 << (BrightScriptParser.ELSE - 34)) | (1 << (BrightScriptParser.ELSEIF - 34)) | (1 << (BrightScriptParser.END - 34)) | (1 << (BrightScriptParser.ENDFUNCTION - 34)) | (1 << (BrightScriptParser.ENDIF - 34)) | (1 << (BrightScriptParser.ENDSUB - 34)) | (1 << (BrightScriptParser.ENDWHILE - 34)) | (1 << (BrightScriptParser.EXIT - 34)) | (1 << (BrightScriptParser.EXITWHILE - 34)) | (1 << (BrightScriptParser.EVAL - 34)) | (1 << (BrightScriptParser.FALSE - 34)) | (1 << (BrightScriptParser.FOR - 34)) | (1 << (BrightScriptParser.FUNCTION - 34)) | (1 << (BrightScriptParser.GETGLOBALAA - 34)) | (1 << (BrightScriptParser.GETLASTRUNCOMPILEERROR - 34)) | (1 << (BrightScriptParser.GETLASTRUNRUNTIMEERROR - 34)) | (1 << (BrightScriptParser.GOTO - 34)) | (1 << (BrightScriptParser.IF - 34)) | (1 << (BrightScriptParser.INVALID - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (BrightScriptParser.LET - 66)) | (1 << (BrightScriptParser.LINE_NUM - 66)) | (1 << (BrightScriptParser.NEXT - 66)) | (1 << (BrightScriptParser.NOT - 66)) | (1 << (BrightScriptParser.OBJFUN - 66)) | (1 << (BrightScriptParser.OR - 66)) | (1 << (BrightScriptParser.POS - 66)) | (1 << (BrightScriptParser.PRINT - 66)) | (1 << (BrightScriptParser.REM - 66)) | (1 << (BrightScriptParser.RETURN - 66)) | (1 << (BrightScriptParser.RUN - 66)) | (1 << (BrightScriptParser.STEP - 66)) | (1 << (BrightScriptParser.STOP - 66)) | (1 << (BrightScriptParser.SUB - 66)) | (1 << (BrightScriptParser.TAB - 66)) | (1 << (BrightScriptParser.THEN - 66)) | (1 << (BrightScriptParser.TO - 66)) | (1 << (BrightScriptParser.TRUE - 66)) | (1 << (BrightScriptParser.TYPE - 66)) | (1 << (BrightScriptParser.WHILE - 66)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CommentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_comment;
    return this;
}

CommentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommentContext.prototype.constructor = CommentContext;

CommentContext.prototype.COMMENT = function() {
    return this.getToken(BrightScriptParser.COMMENT, 0);
};

CommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterComment(this);
	}
};

CommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitComment(this);
	}
};

CommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.CommentContext = CommentContext;

BrightScriptParser.prototype.comment = function() {

    var localctx = new CommentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, BrightScriptParser.RULE_comment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 656;
        this.match(BrightScriptParser.COMMENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EndOfLineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_endOfLine;
    return this;
}

EndOfLineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EndOfLineContext.prototype.constructor = EndOfLineContext;

EndOfLineContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.NEWLINE);
    } else {
        return this.getToken(BrightScriptParser.NEWLINE, i);
    }
};


EndOfLineContext.prototype.comment = function() {
    return this.getTypedRuleContext(CommentContext,0);
};

EndOfLineContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterEndOfLine(this);
	}
};

EndOfLineContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitEndOfLine(this);
	}
};

EndOfLineContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitEndOfLine(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.EndOfLineContext = EndOfLineContext;

BrightScriptParser.prototype.endOfLine = function() {

    var localctx = new EndOfLineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, BrightScriptParser.RULE_endOfLine);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 660;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.NEWLINE:
            this.state = 658;
            this.match(BrightScriptParser.NEWLINE);
            break;
        case BrightScriptParser.COMMENT:
            this.state = 659;
            this.comment();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 665;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 662;
                this.match(BrightScriptParser.NEWLINE); 
            }
            this.state = 667;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EndOfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = BrightScriptParser.RULE_endOfStatement;
    return this;
}

EndOfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EndOfStatementContext.prototype.constructor = EndOfStatementContext;

EndOfStatementContext.prototype.endOfLine = function() {
    return this.getTypedRuleContext(EndOfLineContext,0);
};

EndOfStatementContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(BrightScriptParser.NEWLINE);
    } else {
        return this.getToken(BrightScriptParser.NEWLINE, i);
    }
};


EndOfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.enterEndOfStatement(this);
	}
};

EndOfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof BrightScriptListener ) {
        listener.exitEndOfStatement(this);
	}
};

EndOfStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof BrightScriptVisitor ) {
        return visitor.visitEndOfStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




BrightScriptParser.EndOfStatementContext = EndOfStatementContext;

BrightScriptParser.prototype.endOfStatement = function() {

    var localctx = new EndOfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, BrightScriptParser.RULE_endOfStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 670;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case BrightScriptParser.COMMENT:
        case BrightScriptParser.NEWLINE:
            this.state = 668;
            this.endOfLine();
            break;
        case BrightScriptParser.T__5:
            this.state = 669;
            this.match(BrightScriptParser.T__5);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 675;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,89,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 672;
                this.match(BrightScriptParser.NEWLINE); 
            }
            this.state = 677;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,89,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


BrightScriptParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 34:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

BrightScriptParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 7);
		case 1:
			return this.precpred(this._ctx, 6);
		case 2:
			return this.precpred(this._ctx, 5);
		case 3:
			return this.precpred(this._ctx, 4);
		case 4:
			return this.precpred(this._ctx, 2);
		case 5:
			return this.precpred(this._ctx, 13);
		case 6:
			return this.precpred(this._ctx, 12);
		case 7:
			return this.precpred(this._ctx, 10);
		case 8:
			return this.precpred(this._ctx, 8);
		case 9:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.BrightScriptParser = BrightScriptParser;
